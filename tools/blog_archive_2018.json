[
  {
    "id": -1,
    "title": "My Godot packages",
    "slug": "godot-packages",
    "text": "<article class=\"content post tag-godot tag-game-dev page\">\n<h1 class=\"title\">My Godot packages</h1>\n<section class=\"post-content\">\n<p>During game development I've written a neat collection of plug-ins and helpers for Godot, all of which are free software, under either MIT or GPL licenses. Check them out here:</p>\n<h2 id=\"readytouse\">Ready to use</h2>\n<ul>\n<li><a href=\"https://bitbucket.org/michaelb/godot-gesture\">Godot Gesture</a> - Detects more complicated mobile gestures (pinch, two-finger drag, twist, and double tap)</li>\n<li><a href=\"https://bitbucket.org/michaelb/godot-responsive\">Godot Responsive</a> - A fairly powerful tool that lets you make your game \"responsive\" in the sense that it could work with many different display resolutions with minimal tweaking.</li>\n<li><a href=\"https://bitbucket.org/michaelb/godot-music-mixer\">Godot Music Mixer</a> - \"Jukebox\" with crossfade and playlist features, for game soundtracks</li>\n<li><a href=\"https://bitbucket.org/michaelb/godot-pannable-camera\">Godot Pannable Camera</a> - Simple drop-in pannable camera, great for rapid prototyping top-down games</li>\n<li><a href=\"https://bitbucket.org/michaelb/godot-resource-queue\">Godot Resource Queue</a> - Cleaned up version of the example Godot Resource Queue</li>\n</ul>\n<h2 id=\"workinprogress\">Work in progress</h2>\n<ul>\n<li><p><a href=\"https://bitbucket.org/michaelb/godot-oscillator-anim\">Godot Oscillator Anim</a> - Drop in for simple quick oscillation-based animations. It doesn't do anything new that can't be accomplished with an AnimationPlayer, except much easier to drop-in and tweak for quick juice effects (bobbing, blinking, bouncing, throbbing, etc).</p></li>\n<li><p><a href=\"https://bitbucket.org/michaelb/godot-launcher\">Godot Launcher</a> - Drop-in launcher, which allows customizing resolution, sound options, keyboard and gamepad controls for your game, before launching it. The goal is to eliminate the need to re-implement all these configuration menus for desktop games, similar to <a href=\"https://docs.unity3d.com/430/Documentation/Images/manual/class-InputManager-1.jpg\">Unity's Input Manager</a>. Still needs a bit more work before useful.</p></li>\n<li><p><strong>Godot-Vox</strong> is a set of packages I made for developing voxel-based games, in the vein of Infiniminer or Minecraft. It's mostly for a few game ideas I am working on, and it's heavily in development so the API is subject to change. Nonetheless, the repos are published here:</p>\n<ul><li><a href=\"https://bitbucket.org/michaelb/godot-voxtools\">https://bitbucket.org/michaelb/godot-voxtools</a> - Core 3D data-type, physics</li>\n<li><a href=\"https://bitbucket.org/michaelb/godot-voxmod\">https://bitbucket.org/michaelb/godot-voxmod</a> - Mod system</li>\n<li><a href=\"https://bitbucket.org/michaelb/godot-voxterrain\">https://bitbucket.org/michaelb/godot-voxterrain</a> - Terrain renderer and chunking</li>\n<li><a href=\"https://bitbucket.org/michaelb/godot-voxmod-edit\">https://bitbucket.org/michaelb/godot-voxmod-edit</a> - Voxel data editor that uses the above packages</li></ul></li>\n</ul>\n</section>\n</article>\n</div>\n<div class=\"column main-sidebar\">\n<article class=\"media\">\n<div class=\"media-left\">\n<figure class=\"image is-96x96\">\n<img src=\"../assets/img/square_profile_picture.jpg?v=f73aaa36e2\" alt=\"Michael B\">\n</figure>\n</div>\n<div class=\"media-content\">\n<div class=\"content bio\">\n<p>\n<strong>Michael Bethencourt</strong>\n(<a href=\"http://twitter.com/mbgamedev\">@mbgamedev</a>) is\na developer based in the SF Bay Area. He blogs\nabout indie game development on his OS of choice,\n<abbr title=\"*ahem* GNU/Linux\">Linux</abbr>.\n</p>\n</div>\n</div>\n</article>\n<br />\n<br />\n<br />\n<h4 class=\"title\">My Coding School</h4>\n<a href=\"http://kickstartcoding.com/\" target=\"_blank\">\n<img alt=\"Kickstart Coding\" src=\"../assets/img/kickstart_coding_logo_full_white.png?v=f73aaa36e2\" />\n</a>\n<p>I founded a cutting-edge coding academy. If you live in the San\nFrancisco Bay Area, you can learn to code full-stack web development in\nPython and React.js, by taking one of my affordable, intensive courses.</p>\n\n<br />\n<br />\n<br />\n\n<section class=\"gh-subscribe\">\n<h4 class=\"title\">Subscribe</h4>\n<p>\n<a href=\"../rss/index.html\" class=\"button is-warning is-outlined is-inverted\">\n<span class=\"icon is-small\">\n<i class=\"fa fa-rss\"></i>\n</span>\n<span>RSS</span>\n</a>\n<a target=\"_blank\" class=\"button is-warning is-outlined is-inverted\" href=\"http://cloud.feedly.com/#subscription/feed/http://michaelb.org/rss/\">\n<span>Feedly</span>\n</a>\n</p>\n<p>Want to keep up with my tutorials, code snippets, and random\nmusings on Linux game development? I post 2-4 times per month, so\nsubscribe to catch 'em all!</p>\n<br />\n<br />\n<br />\n</section>\n\n<section>\n<h1 class=\"title\">Code</h1>\n<p>\n<a class=\"button is-warning is-outlined\" href=\"index.html\">\n<span class=\"icon\">\n<i class=\"fa fa-cubes\"></i>\n</span>\n<span>Godot Packages</span>\n</a>\n&nbsp;\n<a class=\"button is-warning is-outlined\" href=\"http://github.com/michaelpb/\" target=\"_blank\">\n<span class=\"icon\">\n<i class=\"fa fa-github\"></i>\n</span>\n<span>GitHub</span>\n</a>\n</p>\n<p>\n<a class=\"button is-warning is-outlined\" href=\"http://bitbucket.org/michaelb/\" target=\"_blank\">\n<span class=\"icon\">\n<i class=\"fa fa-bitbucket\"></i>\n</span>\n<span>Bitbucket</span>\n</a>\n&nbsp;\n<a class=\"button is-warning is-outlined\" href=\"https://www.npmjs.com/~michaelb\" target=\"_blank\">\n<span class=\"icon\">\n<i class=\"fa fa-cube\"></i>\n</span>\n<span>npm</span>\n</a>\n</p>\n<br />\n<br />\n<br />\n</section>\n<section>\n<h1 class=\"title\">Games</h1>\n<div style=\"background-image: url('https://img.itch.zone/aW1hZ2UvMTc2NzU3LzgyNTIyMC5naWY=/180x143%23/Jp3MNB.gif')\" class=\"thumb\"></div>\n\n<iframe frameborder=\"0\" src=\"https://itch.io/embed/145949?border_width=0&amp;bg_color=222222&amp;fg_color=eeeeee&amp;link_color=ffaf24&amp;border_color=363636\" width=\"206\" height=\"165\"></iframe>\n\n<iframe frameborder=\"0\" src=\"https://itch.io/embed/137394?border_width=0&amp;bg_color=222222&amp;fg_color=eeeeee&amp;link_color=ffaf24&amp;border_color=363636\" width=\"206\" height=\"165\"></iframe>\n<br />\n<br />\n<br />\n</section>\n<section>\n<h1 class=\"title\">Stuff I'm working on</h1>\n<div class=\"card\">\n<div class=\"card-image\">\n<figure class=\"image is-4by3\">\n<a href=\"http://whiteboard.michaelb.org/\">\n<img src=\"../assets/img/whiteboard_1.gif?v=f73aaa36e2\" alt=\"Arbora GIF\">\n</a>\n</figure>\n</div>\n<div class=\"card-content\">\n<div class=\"media\">\n<div class=\"media-content\">\n<p class=\"title is-3\">\nWhiteboard\n<span class=\"pull-right\">\n<i class=\"fa fa-linux\"></i>\n<i class=\"fa fa-apple\"></i>\n<i class=\"fa fa-windows\"></i>\n</span>\n</p>\n<p class=\"subtitle is-5\">Slideshows for coding tutorials</p>\n</div>\n</div>\n</div>\n</div>\n<br />\n<br />\n<div class=\"card\">\n<div class=\"card-image\">\n<figure class=\"image is-4by3\">\n\n<img src=\"../assets/img/arbora_4.gif?v=f73aaa36e2\" alt=\"Arbora GIF\">\n\n</figure>\n</div>\n<div class=\"card-content\">\n<div class=\"media\">\n<div class=\"media-content\">\n<p class=\"title is-3\">\nArbora\n<span class=\"pull-right\">\nWIP\n\n</span>\n</p>\n<p class=\"subtitle is-5\">Cultivate a planet</p>\n</div>\n</div>\n</div>\n</div>\n</section>\n\n</div>\n</div>\n</div>\n<footer class=\"footer\">\n<div class=\"container\">\n<div class=\"content has-text-centered\">\n<p>\n<img src=\"../assets/img/alients_01.gif?v=f73aaa36e2\" />\n&copy; Michael Bethencourt 2018\n<a href=\"https://creativecommons.org/licenses/by-sa/4.0/legalcode\">CC-BY-SA</a>\n<img src=\"../assets/img/alients_01.gif?v=f73aaa36e2\" />\n</p>\n</div>\n</div>\n</footer>\n</section>\n<script type=\"text/javascript\" src=\"http://code.jquery.com/jquery-1.12.0.min.js\"></script>\n\n<script>\n</script>\n\n<script type=\"text/javascript\" src=\"../assets/js/jquery.fitvids.js?v=f73aaa36e2\"></script>\n<script type=\"text/javascript\" src=\"../assets/js/index.js?v=f73aaa36e2\"></script>\n\n</body>\n</html>"
  },
  {
    "id": 5,
    "title": "Game development on Linux: Using Linux at every step of the process",
    "slug": "getting-started-with-linux-game-development",
    "text": "<article class=\"content post tag-game-dev\">\n<h1 class=\"title\">Game development on Linux: Using Linux at every step of the process</h1>\n<section class=\"post-content\">\n<p><strong>Want to write games on Linux? I do! Here's how to hit the ground running.</strong></p>\n<p>This post is a (non-exhaustive) overview of the tools available on Linux, just to show that it is possible to use Linux at every step of the game development process. It's the first blog post of what will be a multi-part series on getting going with indie video game development on Linux.</p>\n<blockquote>\n<p><a href=\"http://michaelb.org/webdev2gamedev\">Already into web development? Check out this article on making the conceptual jump.</a></p>\n</blockquote>\n<h2 id=\"linuxgamingthegoldenage\">Linux Gaming: The Golden Age</h2>\n<p>Once upon a time, the words \"Linux\" and \"games\" rarely went together. Linux came in dead last as a viable gaming platform. Of course, over the last few years this <a href=\"https://steamdb.info/linux/\">has completely changed</a>.</p>\n<p>The same story could be told for game development on Linux -- while there have always been a litany of free software graphics engines, the modern indie dev scene tends to shy away from this more \"DIY\" approach and go for the \"batteries-included\" game engines. Well, the good news is these, too, are making their Linux debut, and so us Linux nerds now have a glut of options available for making games.</p>\n<p>All software I suggest here is free software, and almost all should be available in your repo (e.g. Ubuntu Software Center) for free. I'll go over all the options, and the reasoning for the choices I made.</p>\n<h2 id=\"gameenginegodot\">Game engine: Godot</h2>\n<blockquote>\n<h3 id=\"topenginechoicesforlinuxgamedev\">Top engine choices for Linux game dev</h3>\n<ul>\n<li>Non-free: <a href=\"https://www.unrealengine.com/what-is-unreal-engine-4\">Unreal Engine 4</a>, <a href=\"https://unity3d.com/\">Unity 3D</a> </li>\n<li>Free game engines: <a href=\"https://godotengine.org/\">Godot</a>, <a href=\"http://atomicgameengine.com\">Atomic Game Engine</a>, <a href=\"http://www.garagegames.com/products/torque-3d\">Torque</a><sup id=\"fnref:1\"><a href=\"index.html#fn:1\" rel=\"footnote\">1</a></sup></li>\n<li>Free 3D graphics engines: <a href=\"http://www.ogre3d.org/\">Ogre 3D</a>, <a href=\"http://irrlicht.sourceforge.net/\">Irrlicht</a>, <a href=\"https://libgdx.badlogicgames.com/features.html\">libGDX</a>, <a href=\"https://threejs.org/\">three.js</a><sup id=\"fnref:2\"><a href=\"index.html#fn:2\" rel=\"footnote\">2</a></sup> </li>\n<li>Free 2D graphics engines: <a href=\"https://love2d.org/\">L\u00d6VE</a>, <a href=\"http://www.cocos2d-x.org/\">Cocos 2D</a>, <a href=\"http://michaelb.org/getting-started-with-linux-game-development/www.pixijs.com\">pixi.js</a><sup id=\"fnref:2\"><a href=\"index.html#fn:2\" rel=\"footnote\">2</a></sup></li>\n</ul>\n<p><sup id=\"fnref:1\"><a href=\"index.html#fn:1\" rel=\"footnote\">1</a></sup>: Has non-free tools</p>\n<p><sup id=\"fnref:2\"><a href=\"index.html#fn:2\" rel=\"footnote\">2</a></sup>: For browser-based games</p>\n</blockquote>\n<p>There are already tons of articles comparing the <a href=\"https://www.quora.com/Should-I-use-Unity-5-or-Unreal-Engine-4-as-a-beginner\">two most popular game engines</a> available, both of which have native linux versions, so I won't waste your time with that. Instead, I'll quickly go over the reasons I didn't go with either, but instead went with the <a href=\"https://godotengine.org/\">Godot Engine</a>.</p>\n<p>Versus this proprietary competition, the most obvious advantage is licensing: Godot costs nothing, and I own 100% whatever I make with it, no legalese-thinking required. Similarly, no vendor lock-in. I don't want my game-making business dependent on a corporation that can legally pull the rug out from under me, either through new licensing restrictions, closing off their editor from my platform, or just making controversial decisions and cutting off support for old features that I depend on. I may seem too severe, but I for one have been burned too many times to go down that route again.</p>\n<p>Licensing aside, I also simply prefer its approach to scene structure, terse scripting language, light-weight distributable (30MB for the entire thing!), extensible C++ source code (so I will never encounter a brick-wall that can't be broken), and, well, free software ethos: as community-driven software, it keeps the \"indie\" in \"indie game dev\"! ;)</p>\n<blockquote>\n<p><img src=\"../content/images/2016/09/godotvstheworld-1.png\" alt=\"Godot's scene structure\" title=\"\" /></p>\n<p><em>Godot has a different approach to scene structure</em></p>\n</blockquote>\n<h2 id=\"2dgraphicsinkscapegimpkrita\">2D Graphics: Inkscape, GIMP, Krita</h2>\n<p>Linux has everything you need for 2D graphics for game development. These tools are useful for building everything from UI elements, painting assets in 2D games, or creating textures for 3D games.</p>\n<ul>\n<li><p><a href=\"https://inkscape.org/en/\">Inkscape</a> is my favorite vector editor. That basically means you deal with \"lines and shapes\" as opposed to pixels. If you are creating scalable, clean, sharp images based on shapes, this is the way to go.</p></li>\n<li><p><a href=\"https://www.gimp.org/downloads/\">GIMP</a> is a raster image editor, great for manipulating photographs or tweaking textures. If you haven't used it in a while, you should: It's recently caught up with proper built-in layer folders, a PS-like single window interface, and improved text tool.</p></li>\n<li><p><a href=\"https://krita.org/en/\">Krita</a> is a popular and powerful tool for digital artwork.</p></li>\n</ul>\n<h2 id=\"3dgraphicsblender\">3D Graphics: Blender</h2>\n<p>Under Linux, there is really one way to go for 3D graphics, and fortunately it's a great way: <a href=\"https://www.blender.org/\">Blender</a>. Although dauntingly complex, it's one of the most popular 3D creation suites available, and integrates excellently with engines like Godot. Personally, I'm a noob at 3D modeling (\"UV mapping, y u no work\"), but I do know that Blender is pretty dang powerful in the right hands, being used for everything from <a href=\"https://gooseberry.blender.org/about/\">3D-animated movies</a>, to <a href=\"http://1.bp.blogspot.com/-9IXSO4rQnQQ/T5iSFhsHIZI/AAAAAAAAAE8/aktntFSo5ak/s1600/stk-blender.screenshot.jpg\">level editing</a>. The canonical use of Blender is for creating and texturing 3D models to be imported into your game engine.</p>\n<p>If for whatever reason Blender isn't your thing (and you're willing to fork over quadruple digits of cash, yikes), the old industry standard of <a href=\"https://knowledge.autodesk.com/support/maya/troubleshooting/caas/sfdcarticles/sfdcarticles/Operating-system-compatibility-for-Autodesk-Maya.html\">Maya</a> also has a native Linux version, as does <a href=\"https://www.thefoundry.co.uk/products/modo/sys-reqs/\">Modo</a>.</p>\n<h2 id=\"soundeffectsaudacity\">Sound effects: Audacity</h2>\n<p>Despite its out-dated interface, <a href=\"http://www.audacityteam.org/\">Audacity</a> remains a solid option for recording and editing little sound effects. This has built-in OGG and WAV support, and so it plays very nicely with Godot.</p>\n<h2 id=\"musicardourlmmskxstudio\">Music: Ardour, LMMS, KXStudio</h2>\n<p>If you haven't looked into this in a while, you might be surprised at how far Linux audio has gotten. If you are intending to write your own music for your game, you can do quite well with Linux.</p>\n<blockquote>\n<p><img src=\"http://i.imgur.com/fUGk0YW.png\" alt=\"LMMS instruments\" title=\"\" /></p>\n<p><em>LMMS comes with some pretty sweet retro VGM synths built-in, including sound emulators of old game systems</em></p>\n</blockquote>\n<ul>\n<li><p>If you want to throw together some catchy video game tunes or retro sound-effects, <a href=\"https://lmms.io/\">LMMS</a> has you covered, with dozens of built in instruments (including retro synthesizers) and pre-packaged samples. It has a shallow learning curve, so you'll definitely be able to create, well, \"something\" right away.</p></li>\n<li><p><a href=\"https://ardour.org/\">Ardour</a> is a \"pro-tier\" DAW and sequencer. It has both built in MIDI and raster sound support, hosts VSTi and other instruments, and sports non-destructive NLE, basically everything you'd expect. If you want to record and mix a track, or delve a little deeper into music production, it's worth checking out.</p></li>\n</ul>\n<p>It's worth mentioning that a few popular proprietary DAW's have native Linux support also, such as <a href=\"http://www.bitwig.com/en/bitwig-studio.html\">BitWig studio</a>.</p>\n<p>For Linux audio, I highly recommend getting this software (and a lot more goodies) via the <a href=\"http://kxstudio.linuxaudio.org/\">KXStudio repos</a>. These guys are awesome, they've put together a bigger and more recent selection of audio software than most standard repos. I also recommend that you consider the approach of having a dedicated partition just for music production. If you want to get set up with this, check out <a href=\"../getting-started-with-pro-audio-on-linux/index.html\"> my other article: getting started with music production on Linux</a>.</p>\n<h2 id=\"everythingelse\">Everything else</h2>\n<ul>\n<li><p><a href=\"http://gamedev.stackexchange.com/questions/480/version-control-for-game-development-issues-and-solutions\">Version Control</a>: It cannot be stressed enough... use version control! This keeps you from losing work to mistakes, and makes collaboration much, much easier. While <a href=\"https://git-scm.com/\">Git</a> (esp. with <a href=\"https://git-lfs.github.com/\">LFS</a> for game assets), might be the most popular, some prefer <a href=\"https://www.mercurial-scm.org/\">Mercurial</a>.</p></li>\n<li><p>Text editor: Sometimes you'll need to dig into source code or scene files without the use of the IDE. There are a crazy number of high-quality text-editors for Linux, so even pre-installed options (e.g., gedit) are vastly superior to Mac/Windows counter-parts. Personally, I use <a href=\"http://www.vim.org/\">vim</a> for all my coding and text editing. It has a very steep learning curve, so if you are interested, be prepared to sink a lot of time into it!</p></li>\n<li><p>Video editor: For editing your trailer, <a href=\"http://www.openshot.org/\">OpenShot</a> is a solid choice</p></li>\n</ul>\n<h2 id=\"enterthepenguinarmy\">Enter the penguin army</h2>\n<p>Perhaps for the first time, top-notch tools for authoring everything from game code to graphics to sound on Linux are here! Although I'm new to full-time game development, I have been working on game and audio projects (both on Linux and Windows) for 15+ years now, and today the offerings have never been better.</p>\n<p><strong>Do you write games on Linux, or are considering it? Do you prefer other tools? I'd love to hear in the comments!</strong></p>\n<hr />\n<p><em>Changes: From feedback, I added mentions of Maya, Modo, Git LFS, Mercurial, libGDX, and Atomic Game Engine.</em></p>\n</section>\n</article>\n</div>"
  },
  {
    "id": 6,
    "title": "Game dev with Godot: Unit testing your scripts",
    "slug": "unit-tests-for-your-godot-scripts",
    "text": "<article class=\"content post tag-godot tag-game-dev\">\n<h1 class=\"title\">Game dev with Godot: Unit testing your scripts</h1>\n<section class=\"post-content\">\n<p>I wrote a little helper library to help you write unit tests for the logic in your Godot game's scripts.</p>\n<p>First things first: What is <a href=\"https://en.wikipedia.org/wiki/Unit_testing\">unit testing</a> and why would you want it? A unit test is just some code that checks other code to make sure it does what it claims to do. For example, if you implemented a path finding algorithm, a unit test would be code that checks that it does indeed find the correct path for a few different test scenarios. For traditional software development, \"regression tests\" are a non-negotiable must-have. <a href=\"http://chrismdp.com/2015/03/why-games-coders-dont-use-tdd-and-why-it-matters/\">While it may seem like a bother or that it will slow down development, writing good tests will actually <em>speed up</em> refactoring and optimization of code.</a> This can speed up <a href=\"http://steelkiwi.com/blog/main-advantages-automation-testing-your-software/\">development in general</a>.</p>\n<p>In short... more tests for games = less buggy games! And there are simply too many buggy games out there, so let's try not write any more :)</p>\n<blockquote>\n<h5 id=\"examplesawdust\">Example: Sawdust</h5>\n<p>Recently, I've been working on <a href=\"http://michaelb.org/sawdust\">a tanagrams puzzle game called Sawdust</a>. Core functionality of that game involves \"filling up\" a board by fitting pieces. It's difficult to test piece combinations by hand, I don't want any nasty bugs to creep in, so I wrote unit tests for it. I don't know if they'd be of any use to anyone, but if you like full examples, <a href=\"https://bitbucket.org/snippets/michaelb/jMqeq\">click here to see the unit tests I wrote for Sawdust</a>!</p>\n</blockquote>\n<h2 id=\"unittestinglibraries\">Unit testing libraries</h2>\n<p>At the time of writing this article, I know of only two options: mine, and one other. The other option is <a href=\"https://github.com/bitwes/Gut\">GUT</a> which seems to be pretty feature filled. But... this wasn't around when I needed it, so I ended up writing my own <a href=\"https://bitbucket.org/michaelb/unittest.gd/src\">very simple one</a>.</p>\n<p>So, use GUT if you want something very full-featured. If you just want a simple layout and assertions with minimal set-up (a single file), then you might like my quick-and-dirty solution included below. :)</p>\n<h2 id=\"installingunittestgd\">Installing unittest.gd</h2>\n<h4 id=\"1download\">1. Download</h4>\n<p>Download <a href=\"https://bitbucket.org/michaelb/unittest.gd/raw/master/unittest.gd\">unittest.gd</a> to some spot in your Godot project, such as <code>res://scripts/</code>.</p>\n<p>Linux one-liner: <br />\n<code>wget https://bitbucket.org/michaelb/unittest.gd/raw/master/unittest.gd</code></p>\n<h4 id=\"2createatest\">2. Create a test</h4>\n<p>Now you gotta write your actual tests. Create a GDScript file that extends <code>unittest.gd</code>, and has a <code>func test()</code> method that has a bunch of assertions. Here are some examples from the game <a href=\"../sawdust/index.html\">Sawdust</a>:</p>\n<blockquote>\n<p><strong>What's is it doing?</strong>\nIf you aren't familiar with unit tests, you might not be sure what my example test is doing. I'll break it down:</p>\n<ol>\n<li><p>\"testcase\" is simply a human readable way of separating what concept we are testing. In this, we test a few methods of the Board class.</p></li>\n<li><p>The <code>assert_x</code> statements check for a certain condition, for example, that two things are equal, or that something is true. For a full list of what you can assert, look at the code of <code>unittest.gd</code>.</p></li>\n<li><p>If any checks fail, it will alert you when you run this test. This allows you to zero in on \"regressions\" or those little bugs that creep in as you work on something.</p></li>\n</ol>\n</blockquote>\n<pre><code class=\"language-javascript\">extends \"res://scripts/unittest.gd\"\n\nfunc tests():  \n    testcase(\"board can place pieces and check for collisions\")\n    var board = Board.new()\n    board.set_dimensions(13, 13)\n    board.add_block(0, 0) # adds large block\n    assert_false(board.check_placement(0, 0), 'near top left corner')\n    assert_true(board.check_placement(2, 0), 'top left corner')\n    endcase()\n\n    testcase(\"rotating a piece 4x results in the original piece for all pieces\")\n    for i in range(10):\n        var original_piece = board.piece_constants.PIECES[i]\n        var piece = board.rotate_piece(original_piece, 4)\n        assert_dict_equal(piece, original_piece, '4x rotation piece ' + str(i))\n    endcase()\n</code></pre>\n<h4 id=\"3createascripttorunyourtests\">3. Create a script to run your tests</h4>\n<p>Now, you'll want to be able to run all your tests at once. <code>unittest.gd</code> has a helper to do this. Create a script like the following, add the unit test you just wrote to the list, name it <code>runtests.gd</code> (or whatever you want) and plop it into your scripts directory:</p>\n<pre><code class=\"language-javascript\">extends SceneTree  \nfunc _init():  \n    load('res://scripts/unittest.gd').run([\n        'res://scripts/example_unit_test.gd',\n    ])\n    quit()\n</code></pre>\n<p>To run all your tests, run the following command in a terminal (where <code>godot</code> is your Godot binary, wherever you have it):</p>\n<pre><code>$ godot -s ./scripts/runtests.gd\n- [OK] 1/1 - example_unit_test\n- [SUCCESS] 1/1\n</code></pre>\n<p>That's it! Happy testing :)</p>\n<p>PS: All this code is free (MIT licensed like Godot itself)</p>\n</section>\n</article>\n</div>"
  },
  {
    "id": 7,
    "title": "Solo Game Dev Kanban Magic: I used to struggle with self-management, but my most recent technique seems to be working really well",
    "slug": "solo-game-dev-kanban-magic",
    "text": "<article class=\"content post tag-game-dev tag-self-management\">\n<h1 class=\"title\">Solo Game Dev Kanban Magic: I used to struggle with self-management, but my most recent technique seems to be working really well</h1>\n<section class=\"post-content\">\n<p><strong>Over the last month I've been experimenting with an \"agile\" time-management method for my solo-game dev work. The verdict? Works like a charm!</strong></p>\n<p>Recently, I switched from a full-time web dev position to being a full-time solo game dev. Now, this isn't my first time doing solo projects full-time, and I know that my biggest enemy to productivity is often myself, so I wanted to be absolutely sure that I use my time to 100% capacity.</p>\n<p>In my \"day jobs\", I've noticed I could churn out features and code at a pretty steady rate. This had to do with, 1. the fact that other people relied on me kept me motivated, 2. certain tasks were taken care of by others, so all I needed to do was focus on implementing technical specs, and 3. I worked with a \"professional detachment\" from the project.</p>\n<p>I roll my eyes at agile-whatever as much as the next guy, but, still, I needed <em>something</em> of that bureaucracy to keep me going. I've tried a variety of online task trackers that worked for other people, but for whatever reason, none of those clicked. After a month of using my kanban technique, I think it's safe to say this one did click.</p>\n<hr />\n<h2 id=\"michaelbssologamedevkanbanmagic\">michaelb's solo game dev kanban magic</h2>\n<blockquote>\n<p><img src=\"../content/images/2016/09/sprint_kanban_board.jpg\" alt=\"My Kanban board\" title=\"\" /></p>\n<p>My Kanban board is posted on the wall in front of my desk. I use index cards cut in half as \"tickets\". The columns are Icebox, Backlog, Sprint, In Progress, and Done. The In Progress area isn't visible in this photo, but that's because I move In Progress tickets down to a separate spot so they can be in front of me as I work on them. The color coding lets me split based on project and/or ticket type.</p>\n</blockquote>\n<p>The method I came up with, click-baity titles aside, is just a slew of garden-variety agile concepts adapted for my needs as a solo game dev. The rules:</p>\n<ol>\n<li>2-3 day sprints </li>\n<li>Track all time spent with small tickets </li>\n<li>Kanban board </li>\n<li>Dead trees for all the things!</li>\n</ol>\n<p>This worked for me. Maybe with some personalization, there could be something helpful in here for you!</p>\n<h3 id=\"howtodoit\">How to do it</h3>\n<ol>\n<li><p><strong>Split up your time into 2-3 day sprints.</strong> Short sprints = more agile, agile is god, and since 1 person is the smallest team, should also have very short sprints, or something. At the beginning of each sprint, you will move tickets (portions of work) from \"backlog\" to \"sprint\" on your kanban board.</p></li>\n<li><p><strong>Never do anything without first writing a ticket.</strong> </p>\n<ul><li>I assign points to my ticket based on a rough estimate of the amount of time I'll spend on it, in increments of 2, 4, or 8 hours. My estimates got better with practice.</li>\n<li>Each ticket must be \"deliverable\" -- that is, it should integrate into your final product and not break anything else or leave stuff in a state of disrepair.</li>\n<li>Track <em>everything</em> you do as tickets: You'll be making design tickets, art tickets, programming tickets, marketing tickets, even blogging tickets (guess what I have sitting in front of me as I write this blog post?)</li>\n<li>The \"deliverable\" varies based on the ticket type. For code, it's a git commit (you <em>are</em> using version control... right?). For designing a feature, it's a specification document saying what it <em>should</em> do, to be read by whoever will implement it (e.g. you).</li></ul></li>\n<li><p><strong>Track your sprints on a Kanban board.</strong> The board I use has the following categories: </p>\n<ul><li>Icebox: These are tickets that are \"nice to have\". They are not essential to the minimum feature-set of your game. In general, when you have a \"cool idea\", it should go here first as you work on more pressing stuff.</li>\n<li>Backlog: These are tickets you know you will need to complete eventually. The tickets here should be the route to a milestone of some kind, such as your first alpha or your next beta, or the released game.</li>\n<li>Sprint: You have committed to these tickets for the current sprint. Only move to here as many tickets as you can do in one sprint: You should feel bad if you over-commit, or under-commit.</li>\n<li>In Progress: You are working on this right now / today. If you get stuck, move it back to either Sprint or Backlog, and reflect on how you could better manage yourself so this happens less.</li>\n<li>Done: Once the ticket has been delivered, move it here.</li></ul></li>\n<li><p><strong>Be a Luddite, use dead trees.</strong> You don't have coworkers or bosses, you just have yourself, so you need something sitting in front of you reminding you of what you have committed to. For me, this was perhaps the most important ingredient. I keep it in front of my desk so I can't ignore it like I could a website. I've tried probably a dozen web-based tools, and I can't get myself to be consistent with any of them if I'm the only person using it. You need to feel bad if you break the rules.</p></li>\n</ol>\n<h3 id=\"pitfallsofsolodevelopment\">Pitfalls of solo development</h3>\n<p><strong>Solo work is hard mode.</strong></p>\n<p>I said earlier that this method is working for me since it addresses some of the pitfalls of solo work. I've teased apart some of the pitfalls I think I've fallen into the past, and how to avoid them.</p>\n<h4 id=\"evilplotbunnyofdeathanddoom\">Evil plot bunny of death and doom</h4>\n<blockquote>\n<p><img src=\"http://i.imgur.com/acLFVk5.jpg\" alt=\"The Killer Rabbit\" title=\"\" /></p>\n</blockquote>\n<p>Generally speaking, my previous work, was, well, \"work\". It was something I wanted to get over with. Now I am doing something I actually <em>like</em> doing. At my previous \"day jobs\" I was much more likely to put in minimal effort to meet the technical specifications of the task at hand. While putting passion into your game is vital, the bigger risk for me (and I suspect for most) is <em>too much passion</em>: having fun, but ending up wasting precious time while not getting tangibly closer to releasing.</p>\n<p>Writers call these <a href=\"https://en.wiktionary.org/wiki/plot_bunny\">plot bunnies</a> -- pesky ideas that you feel compelled to write, but ultimately multiply out of control. This is very applicable to game writing: You don't need to spend hours drawing a really cool sprite for an enemy that's likely to be cut anyway, but the temptation is strong.</p>\n<p><strong>Lesson learned:</strong> Stay focused on daily deliverables. \"Cool stuff\" (plot bunnies) gets put in the icebox. If I commit to 8-12 points a day, I need to get 8-12 points done that day.</p>\n<h4 id=\"tothineownselfbeajerk\">To thine ownself be a jerk</h4>\n<p>During the development stage, you don't have anyone to be mean to you. Remember: Your potential players won't be nice to you. They'll (rightly) expect a full game and for you to deliver within the time you have.</p>\n<p>When working with others in my \"day job\", I had people that depended on me to do my job. There was this subtle on-going social pressure to do what I had to do. When working by myself, the social pressure is distant or abstract: Even if you live hand-to-mouth as a game dev, this isn't influenced by day-to-day development. Instead there's a \"delay\" of even years before you get that social pressure to deliver. The flip-side can be equally problematic: You get no \"job well done\" or pat on the back for every day's little accomplishments.</p>\n<p><strong>Lesson learned:</strong> Use paper (\"dead trees\") for everything. I keep the kanban board right in front of my desk, judging me. I take my job seriously. If I don't complete enough I need to <em>feel guilty</em> like I let somebody down (myself, future players). If I get my stuff done, I need to feel good, satisfied and rewarded: I did my job today, time to kick back and recharge my mental batteries.</p>\n<h4 id=\"thevalvemethodlotsofhats\">The Valve method: Lots of hats</h4>\n<p>Valve Software is known for unusual management hierarchy. They are also known for making games with lots of hats. For solo game devs, the second thing is the more important.</p>\n<blockquote>\n<p><img src=\"http://1u88jj3r4db2x4txp44yqfj1.wpengine.netdna-cdn.com/wp-content/uploads/2014/01/hats-930x407.jpg\" alt=\"All the hats\" title=\"\" /></p>\n</blockquote>\n<p>In a traditional software shop as a developer, I can rely on product managers to create technical specifications, testers to ensure what I wrote matched those specifications, design to hand me pretty mock-ups, and marketing to produce text and content. All these relationships have some degree of cooperation and also \"friendly antagonism\" between them. Most importantly, each team can focus on doing their job, and assume the other will get their part done. Design didn't have to think about <em>how</em> I made things pretty, they just needed to define what \"pretty\" was. Product managers didn't need to know the internals of the new feature, just what was generally easy and hard, and from that, triage ranked priorities for what to do next.</p>\n<p>I'm a solo dev now, so I gotta be everything. I gotta wear <em>all of the hats</em>. But in order to be as productive as I was, I need to self-police about only wearing one hat at a time. While I'm thinking about what's pretty, I can't worry about how I'll implement it. While I'm thinking about specifications of my game-play or game-engine, I can't worry about how I'll test it. I just need to do each job as well as I can and figure out how to make the ends-meet in the end, otherwise I'll be overwhelmed.</p>\n<p><strong>Lesson learned:</strong> Each ticket I create is of a certain \"role\". Many are development, but others might be art, or web-site work. If I'm not sure <em>what</em> I want to do next, I create both a \"design\" ticket and an \"implement\" ticket. For the first, I sit down in front of a piece of paper away from the computer and brainstorm a specification. I give myself a good chunk of time for this, at least 1-3 hours. I resist the urge to think about implementation: this is a contract with myself, I'll worry about implementation after. I have separate time allotted for both.</p>\n<h2 id=\"reapingthebenefits\">Reaping the benefits</h2>\n<p>I've tried it for about a month, and consistently delivered ~40 points a week, which was my goal. I feel quantitatively more able to create <em>deliverable</em> products than I have with personal projects in the past. Will it continue to work? I think so, I hope so, and I'll keep you guys informed!</p>\n<p><strong>Have you tried this or something similar? How did it go? What project management techniques work for you?</strong> Let me know in the comment section!</p>\n</section>\n</article>\n</div>"
  },
  {
    "id": 11,
    "title": "Getting started with music production on Linux: Three ways to get set up with pro-audio free software",
    "slug": "getting-started-with-pro-audio-on-linux",
    "text": "<article class=\"content post tag-linux-audio tag-tutorial tag-music\">\n<h1 class=\"title\">Getting started with music production on Linux: Three ways to get set up with pro-audio free software</h1>\n<section class=\"post-content\">\n<p>Want to make music on Linux with pro-quality software?</p>\n<p>There are plenty of reasons to choose Linux over other platforms for audio production: For me, I was willing to learn some new software, and was sick of being burned by vendor lock-in, not even to mention the crazy high cost of DAW (Digital Audio Workstation) software. I wanted to have a free software audio set-up that I could \"set up and forget\", so I could stop wasting time tinkering with different options, and instead jump head-first into producing soundtracks for the video games I'm developing on Linux.</p>\n<p>So, I investigated 3 different routes, and recorded my results here.</p>\n<p>The conclusion? KXStudio is super freaking cool. Seriously: Install once and get a crazy number of instruments and effects, dozens of DAWs and sequencers, on top of a low-latency kernel, all set up and ready to go, <em>all for free</em>. At least in terms of quantity, it's the simplest way to go from 0 to 60 for audio production on any platform. Pro-audio in Linux is totally <em>here</em>.</p>\n<p><strong>If that sold you, then just skip over to the <a href=\"index.html#kxstudio\">last section and download and install the KXStudio distro</a>.</strong></p>\n<h2 id=\"option1vanillarepos\">Option 1: Vanilla repos</h2>\n<blockquote>\n<p><img src=\"../content/images/2016/10/installing_lmms.png\" alt=\"LMMS\" title=\"\" />\nLMMS is a fun music creation free software with an easy learning curve, that's actually pretty powerful. It tends to be updated quickly in vanilla repos, so go ahead and install this like you would any other Linux software.</p>\n</blockquote>\n<p>The first -- and typically the last -- stop for any software in Linux is to install it from your distribution's repos. Easy-peasy: either use a GUI application like GNOME or Ubuntu Software (pictured right) or a command-line application such as <code>apt-get</code> (easy as <code>sudo apt-get install lmms audacity</code> to get going).</p>\n<p>This method is fine for a few pieces of Linux audio software, notably LMMS and Audacity. However, if you want to try using the complicated stuff with JACK (Ardour<sup id=\"fnref:1\"><a href=\"index.html#fn:1\" rel=\"footnote\">1</a></sup>, <a href=\"http://non.tuxfamily.org/wiki/Screenshots\">Non Sequencer</a>, and a bunch of other Linux pro-audio software that I didn't even know about), its not ideal: often the repo versions will be outdated, this software can be difficult to configure, and there are a lot of really cool pieces of Linux audio software that are not even available in many vanilla repos.</p>\n<h2 id=\"option2addingkxstudiorepos\">Option 2: Adding KXStudio repos</h2>\n<p>Playing with LMMS is fine and all, but I wanted to use JACK. I mean, its a seriously cool idea: It takes the UNIX philosophy of \"small interchangeable applications connected with pipes\" into the audio software world. Pipe any application into any other application, MIDI notes, control, or audio channels all get \"plugs\" that can hook up into each other. Pretty cool, huh? Fortunately the awesome folks at KXStudio maintain packages that make it easy to set up on Ubuntu.</p>\n<h4 id=\"installingkxstudioreposonubuntu1604\">Installing KXStudio repos on Ubuntu 16.04</h4>\n<blockquote>\n<p>I'd highly recommend clicking the link and using the full instructions since there's less chance of mistakes, but if you'd rather just copy and paste one huge command and leave your computer chugging, you can use this one:</p>\n<div style=\"white-space: nowrap; overflow-y: auto; display: block; height: 2em;\"><code>sudo apt-get install apt-transport-https software-properties-common wget libglibmm-2.4-1v5 && wget https://launchpad.net/~kxstudio-debian/+archive/kxstudio/+files/kxstudio-repos_9.3.0~kxstudio1_all.deb && wget https://launchpad.net/~kxstudio-debian/+archive/kxstudio/+files/kxstudio-repos-gcc5_9.3.0~kxstudio1_all.deb && sudo dpkg -i kxstudio-repos_9.3.0~kxstudio1_all.deb && sudo dpkg -i kxstudio-repos-gcc5_9.3.0~kxstudio1_all.deb && sudo apt-get update && sudo apt-get install kxstudio-default-settings kxstudio-meta-all</code></div>\n</blockquote>\n<ol>\n<li><p><a href=\"http://kxstudio.linuxaudio.org/Repositories\">Follow the instructions to set up KXStudio repos.</a> Note the steps for versions \"later than 15.10\".</p></li>\n<li><p>Update apt cache: <br />\n<code>sudo apt-get update</code></p></li>\n<li><p>Install all KXStudio software running this command to install these meta-packages: <br />\n<code>sudo apt-get install kxstudio-default-settings kxstudio-meta-all</code></p></li>\n</ol>\n<h4 id=\"troubleshootingkxstudioreposonubuntu1604httpmichaelborgtroubleshootingkxstudioonubuntu1604\"><a href=\"../troubleshooting-kxstudio-on-ubuntu-16-04/index.html\">Troubleshooting KXStudio repos on Ubuntu 16.04</a></h4>\n<p>I followed these steps precisely from a vanilla Ubuntu 16.04 installation, and yet I still ran into four issues before I got audio production up and running. If you are taking this route and get stuck, then this might help: <a href=\"../troubleshooting-kxstudio-on-ubuntu-16-04/index.html\">Troubleshooting KXStudio repos on Ubuntu 16.04</a>. (I broke them off into their own post, to avoid cluttering up this article.)</p>\n<p>All-in-all, though, the easiest and fastest way to get going with Linux pro-audio is just installing the KXStudio distro on a separate partition, which is what I ended up doing.</p>\n<p><a name=\"kxstudio\"></a></p>\n<h2 id=\"option3thekxstudiodistro\">Option 3: The KXStudio distro</h2>\n<blockquote>\n<p><img src=\"../content/images/2016/10/catia.png\" alt=\"KXStudio's Catia editing JACK's software &quot;patches&quot;\" title=\"\" />\nJACK lets you pipe anything into anything. This is KXStudio's Catia, one of several GUI JACK management tools.</p>\n</blockquote>\n<p>The third option is to keep a separate partition, hard-drive, or computer with your pro-audio set-up, running a distribution dedicated to audio.</p>\n<p><strong>Do this one.</strong> Really. The time it took to download and install KXStudio was way less than troubleshooting the other options. It was really the only flawless Linux pro-audio experience for me, and the only one I'd recommend.<sup id=\"fnref:2\"><a href=\"index.html#fn:2\" rel=\"footnote\">2</a></sup></p>\n<p>It's really a killer feature to not have to worry about breaking your audio software with your normal installation, which you can freely keep updating, while keeping your pro-audio installation clean and stable with everything set up exactly as you need.</p>\n<ol>\n<li><p><a href=\"http://kxstudio.linuxaudio.org/Downloads\">Download the KXStudio ISO</a></p></li>\n<li><p>Install it on either a separate partition or hard-drive (or a dedicated studio computer). If you've never installed a GNU/Linux distribution before, <a href=\"http://www.pcadvisor.co.uk/how-to/linux/how-install-ubuntu-using-usb-flash-drive-3351312/\">this is just like installing any other distro.</a></p></li>\n<li><p>(Optional) Configure GRUB to rename this installation to KXStudio (by default, it confusingly calls itself \"Ubuntu\"), and make it not the default (I used <a href=\"http://ubuntuhandbook.org/index.php/2014/04/install-grub-customizer-ubuntu-1404/\">GRUB Customizer</a>).</p></li>\n<li><p>Either keep the default KDE or install a different desktop environment, and then enjoy a fully-tuned Linux audio production set up!</p></li>\n</ol>\n<p>The KXStudio develops some pretty great applications themselves. I personally like to use the following (all ready-to-use):</p>\n<ul>\n<li><p><a href=\"http://kxstudio.linuxaudio.org/Applications:Cadence\">Cadence</a> for JACK / audio configuration. Gives a high-level control of audio on your system.</p></li>\n<li><p><a href=\"http://kxstudio.linuxaudio.org/Applications:Claudia\">Claudia</a> as a \"session manager\". This is a nicely configured graphical front-end to <a href=\"https://github.com/LADI\">LADISH</a>, basically, a set of tools that start and stop all your other audio software, hook stuff up, and save your configuration to a project file. This is my first stop: where I start new projects. When I load old projects, it automatically starts everything I was using so I can resume exactly where I left off.</p></li>\n<li><p><a href=\"http://kxstudio.linuxaudio.org/Applications:Carla\">Carla</a> to host and manage the 100s of awesome synths and effects KXStudio comes with, such as <a href=\"http://www.linuxsynths.com/amSynthdemos/amsynth.html\">amSynth</a>. Very importantly, it also supports directly hosting SFZ soundfonts, so I can use the free-licensed <a href=\"http://sso.mattiaswestlund.net/\">Sonatina Symphonic Orchestra</a> and <a href=\"https://musical-artifacts.com/artifacts/3\">Salamander Grand Piano</a>.</p></li>\n</ul>\n<p>I eventually settled on <a href=\"http://www.muse-sequencer.org/\">MusE</a> as my favorite sequencer. It's a bit dated in appearance, but as a former Cakewalk Sonar user I found its interface the most easy to pick up, and unlike Ardour it has pop-out piano rolls, which is a must-have for me.</p>\n<p><strong>Have other suggestions for Linux pro-audio? Let me know in the comments!</strong></p>\n<hr />\n<div class=\"footnotes\"><ol><li class=\"footnote\" id=\"fn:1\"><p>Note that for Ardour, another option to get the cutting edge versions is to \"pay what you want\" to <a href=\"https://ardour.org/\">for a subscription to cutting-edge builds</a>. Even if you do this, I still recommend KXStudio in addition since it comes with JACK pre-configured, and with a huge quantity of free software synths and plug-ins that aren't in the normal repos and I didn't even know about. <a href=\"index.html#fnref:1\" title=\"return to article\">\u21a9</a></p></li>\n<li class=\"footnote\" id=\"fn:2\"><p>Just so you know, KXStudio isn't the only Linux Audio distro out there. The two most popular alternatives are <a href=\"https://ubuntustudio.org/\">Ubuntu Studio</a> and <a href=\"http://www.bandshed.net/avlinux/\">AVLinux</a>. From what I've read, it would seem to me that KXStudio has the best software selection, but I'm curious to know if there are advantages to the other options. <a href=\"index.html#fnref:2\" title=\"return to article\">\u21a9</a></p></li></ol></div>\n</section>\n</article>\n</div>"
  },
  {
    "id": 12,
    "title": "Linux pro-audio: Trouble-shooting JACK on Ubuntu 16.04 (KXStudio repos)",
    "slug": "troubleshooting-kxstudio-on-ubuntu-16-04",
    "text": "<article class=\"content post tag-linux-audio tag-music\">\n<h1 class=\"title\">Linux pro-audio: Trouble-shooting JACK on Ubuntu 16.04 (KXStudio repos)</h1>\n<section class=\"post-content\">\n<p>To produce music for the games I'm writing, had to get set up for GNU/Linux pro-audio. I installed the KXStudio repos on a vanilla Ubuntu 16.04 install on a Lenovo T520, and ran into 4 issues before I had a comfortable set-up and audio functioning. Some of these may apply to you, so hopefully my info on how to solve them could help you out!</p>\n<p><strong>In light of these issues and other paper-cuts, I'd highly recommend instead installing the KXStudio distro on a separate partition, which is what I ended up doing in the end.</strong> <a href=\"../getting-started-with-pro-audio-on-linux/index.html\">Click here for my original post which talks a bit about that process.</a></p>\n<h2 id=\"issue1usernotinaudioorrealtimegroup\">Issue #1: User not in audio or realtime group</h2>\n<p>My Issue: Cannot create a session in Ardour</p>\n<p>Solution: Add your user to <code>realtime</code> and <code>audio</code> groups.</p>\n<p>The first thing I tried to do was create a session in Ardour. It immediately failed and crashed, saying that it could not create a new project. The error message made me think it was file-permission related, but it actually had nothing to do with it: Between <a href=\"http://jackaudio.org/faq/\">helpful JACK documentation</a> and reading old <a href=\"https://community.ardour.org/node/7237\">Ardour forum threads</a>, I figured out that it can report this error when the user is not in the realtime and audio groups, which can be fixed as follows:</p>\n<pre><code class=\"language-bash\">sudo usermod -a -G realtime $USER  \nsudo usermod -a -G audio $USER  \n</code></pre>\n<p>(<code>$USER</code> gets auto-substituted for your username.)</p>\n<h2 id=\"issue2jackisnotstarted\">Issue #2: JACK is not started</h2>\n<p>My Issue: Started Claudio session manager, and it said it couldn't connect to JACK.</p>\n<p>Solution: Start JACK, just type <code>jack_control --start</code></p>\n<p>This is an obvious one, but for some reason I thought JACK would autostart by default with the KXStudio repos, which is not the case. Howwever, KXStudio does provide a few nicer ways of tarting JACK:</p>\n<ol>\n<li>Use <a href=\"http://kxstudio.linuxaudio.org/Applications:Cadence\">Cadence</a> - this is what I use, it's a GUI control panel for monitoring and managing audio </li>\n<li><a href=\"http://qjackctl.sourceforge.net/\">qjackctl</a> - popular older GUI solution </li>\n<li>Ardour can start and manage it automatically.</li>\n</ol>\n<h2 id=\"issue3pulseaudionotkillednomidi\">Issue #3: Pulse audio not killed, no MIDI</h2>\n<p>My Issue: Claudio starts, but it doesn't show hardware MIDI</p>\n<p>Solution: For me, the issue was pulse audio was still running. Kill it <code>pulseaudio --kill</code></p>\n<p>You'll probably want a more <a href=\"http://www.linuxplanet.com/linuxplanet/tutorials/7130/2\">elegant solution</a> to disable it permanently.</p>\n<h2 id=\"issue4jacksalsaoutputnothookeduptotheaudio\">Issue #4: JACK's ALSA output not hooked up to the audio</h2>\n<p>Issue: Everything seemed fine and I could route audio through JACK, but nothing came out of my speakers or headphones.</p>\n<p>Solution: For some reason JACK wasn't hooked up to my hardware.</p>\n<p>I personally solved it using the KXStudio JACK manager Cadence as such:</p>\n<ol>\n<li>In Cadence, click the \"Configure\" button </li>\n<li>Now click \"Driver\" </li>\n<li>Then click \"ALSA\" </li>\n<li>Finally, look at the option Output Device and select the one that makes sense</li>\n</ol>\n<hr />\n<p>My conclusion for pro-audio on Linux (and maybe in general on all platforms): <strong>keep a separate partition, hard-drive, OR computer with your pro-audio set-up, running a distribution dedicated to audio.</strong> This may sound like over-kill, but its actually less effort in the long-run.</p>\n<p>Check out <a href=\"../getting-started-with-pro-audio-on-linux/index.html\">my first post on this</a> if you are curious.</p>\n</section>\n</article>\n</div>"
  },
  {
    "id": 13,
    "title": "Snippet: NIUM&#x27;s 3D effect, in Godot",
    "slug": "niums-3d-effect-in-godot",
    "text": "<article class=\"content post tag-godot tag-game-dev tag-tutorial tag-snippet\">\n<h1 class=\"title\">Snippet: NIUM&#x27;s 3D effect, in Godot</h1>\n<section class=\"post-content\">\n<p>Recently on /r/gamedev there was a nice article about achieving <a href=\"https://gfycat.com/ConsciousZanyArmedcrab\">NIUM's isometric voxel-ish 3D effect</a> using layers of sprites. It's a very simple and obvious technique, you should read it if have a minute: <a href=\"http://www.like100bears.com/writing/2d-3d-in-gamemaker-studio\">2D 3D in GameMaker Studio</a>.</p>\n<p>Well, I implemented it in Godot! A hastily put-together example (island? duck head?):</p>\n<p><img src=\"../content/images/2016/10/Peek-2016-10-19-10-20.gif\" alt=\"Godot 3D voxel-ish isometric effect\" /></p>\n<p><a href=\"https://bitbucket.org/snippets/michaelb/bMdjq\">Check out the snippet here.</a> It's in public domain, so feel free to use it in your projects. Use it by simply attaching it to a <code>Node2D</code>, and then assigning the Spritesheet and Layer Count to point to a horizontal spritesheet of your layers and the number of layers in the spritesheet, respectively. Personally I created a separate scene that I instance when I need it. For a \"deeper\" effect, you can try an offset greater than 1.</p>\n<p>Note: As mentioned in the original article, its not very efficient in the general case. However, it's fine for a few smoothly-rotatable objects in an isometric environment, especially if you want precise pixel control with little hassle (as opposed to using actual 3D and rendering with pixel-y shaders). It could be optimized for rendering time, at the expense of increased memory consumption and loading time, by pre-rendering the all the directions on load, something I may add as a feature in the future to this class.</p>\n</section>\n</article>\n</div>"
  },
  {
    "id": 14,
    "title": "Game dev with Godot: I wrote a Godot package to crossfade between playlists and make adaptive music",
    "slug": "game-dev-with-godot-adaptive-music-with-godot-music-mixer",
    "text": "<article class=\"content post tag-game-dev tag-tutorial tag-godot tag-music\">\n<h1 class=\"title\">Game dev with Godot: I wrote a Godot package to crossfade between playlists and make adaptive music</h1>\n<section class=\"post-content\">\n<p>For the <a href=\"../sawdust/index.html\">puzzle game Sawdust</a>, I needed a powerful enough playlist and music mixing system so I could crossfade between tracks based on what's going on in the game, and so that I could make the soundtrack less repetitive by composing a collection of shorter ambient pieces that are played on shuffle. </p>\n<p>So, I wrote <a href=\"https://bitbucket.org/michaelb/godot-music-mixer/\">Godot Music Mixer</a>, which you can use in your projects!</p>\n<p><a href=\"https://bitbucket.org/michaelb/godot-music-mixer/get/master.zip\">Directly download the project (with an example) as a zip file here.</a></p>\n<h2 id=\"basicusage\">Basic usage</h2>\n<p>Simply instance the <code>MusicPlaylist.tscn</code>, and add any number of <code>StreamPlayer</code> children for each individual track. Arrange them in any order you see fit, or just check \"shuffle\" to get a random order every time!</p>\n<p><img src=\"../content/images/2016/10/godot_music_adding_tracks.gif\" alt=\"Adding tracks\" /></p>\n<p>This is the simplest use: Basically, a playlist player resembling a desktop application.</p>\n<blockquote>\n<p><a href=\"http://www.gamasutra.com/view/feature/129990/defining_adaptive_music.php\">Adaptive music in video games</a> is music that responds to what's going on. A way you can accomplish this is by writing some calm, ambient tracks that play when your character is just moving around, and then write some other more exciting tracks, then <a href=\"https://www.lifewire.com/what-is-crossfading-2438544\">crossfade</a> between them based on events in the game, such as a certain number of enemies being nearby, a boss battle, and so on.</p>\n<p>For the transition to be smooth, you'll probably want to crossfade. This is where the my package comes into play.</p>\n</blockquote>\n<h2 id=\"adaptivemusic\">Adaptive music</h2>\n<p>The example included in the repository shows how you can make adaptive music. In summary:</p>\n<ol>\n<li>Create one master MusicPlaylist: This is the one you will start/stop, and switch between \"moods\". Set autoplay = true, and \"crossfade\" to some appropriate amount, such as 3 seconds. </li>\n<li>Create a playlist for your \"calm\" music called \"Calm\", and add StreamPlayers for each track. Set it to \"prefer pause\", so that when you go back from \"action\" mode. A cool effect is writing a collection of short ambient tracks, then setting \"shuffle\" and \"crossfade\", so the ambient songs are random every time. </li>\n<li>Create an action playlist named \"Action\", and add a StreamPlayer for each track. </li>\n<li>It will start in \"calm\" mode. To switch to action, do <code>get_node('MusicPlaylist').crossfade_to_child('Action')</code>. And as you may have guessed, to switch to calm do <code>get_node('MusicPlaylist').crossfade_to_child('Calm')</code> :)</li>\n</ol>\n<p><img src=\"../content/images/2016/10/godot_music_settings.gif\" alt=\"Configuring nested playlists\" /></p>\n<p>For full information, read the README at <a href=\"https://bitbucket.org/michaelb/godot-music-mixer/\">the BitBucket page</a>. It's free / open source software, so contributions are of course welcome!</p>\n<p>I hope my package is useful! It's free for any sort of use, but please let me know if you end up using it if you have the time. :)</p>\n</section>\n</article>\n</div>"
  },
  {
    "id": 15,
    "title": "Snippet: Godot Resource Queue",
    "slug": "godot-resource-queue",
    "text": "<article class=\"content post tag-godot tag-game-dev\">\n<h1 class=\"title\">Snippet: Godot Resource Queue</h1>\n<section class=\"post-content\">\n<p>Need to build a loading screen in Godot? I took the <a href=\"http://docs.godotengine.org/en/latest/tutorials/engine/background_loading.html\">resource queue example</a> from the Godot Documentation, and cleaned it up a bit and put it in its own repo. This allows for background loading, a progress bar type screen, etc. </p>\n<p>Maybe other people will find a use for it! Check it out here: <a href=\"https://bitbucket.org/michaelb/godot-resource-queue/src\">Godot Resource Queue</a></p>\n<p>Or just get the relevant file:</p>\n<p><code>wget https://bitbucket.org/michaelb/godot-resource-queue/raw/master/ResourceQueue.gd</code></p>\n</section>\n</article>\n</div>"
  },
  {
    "id": 16,
    "title": "Simple puzzle game graphics with Inkscape bevels",
    "slug": "simple-puzzle-game-graphics-with-inkscape-bevels",
    "text": "<article class=\"content post tag-tutorial tag-inkscape tag-graphics\">\n<h1 class=\"title\">Simple puzzle game graphics with Inkscape bevels</h1>\n<section class=\"post-content\">\n<p>I'm about the opposite of a graphics expert, but I have discovered that by using Inkscape's built-in filters you can very quickly make some basic, initial assets for puzzle games, or UI elements for games of other genres. This is less a tutorial, more just to inspire other artistically-challenged people like me with what can be accomplished with the built-in filters.</p>\n<p>First, if don't have Inkscape installed, you should do that now! It's free, and cross-platform, and <a href=\"../getting-started-with-linux-game-development/index.html\">importantly for me</a>, native on Linux. <a href=\"http://wiki.inkscape.org/wiki/index.php/Filter_Effects\">Inkscape's filter feature</a> is way, way more powerful than I'm using it here... but, baby-steps!</p>\n<h3 id=\"heartpowerup\">Heart powerup</h3>\n<p>Here's an example of making a heart icon using the \"Glowing Metal\" filter:</p>\n<p><img src=\"../content/images/2017/02/inkscape_glowing_metal_filter.gif\" alt=\"Glowing metal heart icon\" /></p>\n<ol>\n<li><p>First I made the icon in a flat way. For example you can use basic geometric shapes such as circles and squares, and then using \"Path > Combine\" to merge them, or draw using the pen tool and a grid.</p></li>\n<li><p>Then I tried out some of the filter presets until I got to one I liked, to be used as a heart power-up for a puzzle-game.</p></li>\n</ol>\n<p>For an \"unfilled\" heart, I just got rid of the fill and just used a stroke on the original effect:</p>\n<p><img src=\"../content/images/2017/02/inkscape_glowing_metal_filter_empty.gif\" alt=\"Glowing metal, unfilled heart icon\" /></p>\n<h3 id=\"glasseffect\">Glass effect</h3>\n<p>Creating a transparent \"glass dome\" effect is also useful, great for UI for both puzzle games and others (such as RPGs):</p>\n<p><img src=\"../content/images/2017/02/inkscape_smart_jelly_glass_effect.gif\" alt=\"Glass dome UI effect\" /></p>\n<ol>\n<li><p>Make a semi-transparent, white shape</p></li>\n<li><p>Apply the \"Smart Jelly\" filter</p></li>\n</ol>\n<p>That's all for now, I hope it's useful for someone out there!</p>\n</section>\n</article>\n</div>"
  },
  {
    "id": 17,
    "title": "Godot Pannable Camera: A re-usable camera helper for Godot",
    "slug": "godot-pannable-camera",
    "text": "<article class=\"content post tag-godot tag-3d tag-game-dev\">\n<h1 class=\"title\">Godot Pannable Camera: A re-usable camera helper for Godot</h1>\n<section class=\"post-content\">\n<p>I put together <a href=\"https://bitbucket.org/michaelb/godot-pannable-camera/src\">a little camera script</a> that should be useful for RPGs, platformers, and RTS games in the <a href=\"https://godotengine.org/\">free software Godot Game Engine</a>. It has a top-down (or angled) camera that has built in key-bindings for panning around using WASD keys.</p>\n<p>I wrote it to quickly prototype things like content editors or previewing terrain. It also has the ability to track another node, such as the player character in an RPG or action game.</p>\n<h2 id=\"examplebasiccapabilities\">Example basic capabilities</h2>\n<p>As you can see, it permits panning around, adjusting distance, adjusting angle, and adjusting rotation, all with WASD keys:</p>\n<blockquote>\n<p><code>WASD</code> - Pans the camera around the x and z axis</p>\n<p><code>QE</code> - Rotates the camera (around the y axis)</p>\n<p><code>RF</code> - Changes the angle of the camera.</p>\n<p><code>+-</code> - Moves toward or away from ground / target</p>\n<p><code>[]</code> - Adjusts the depth of the projection</p>\n</blockquote>\n<p><img src=\"../content/images/2017/02/godot_pannable_camera_2.gif\" alt=\"Example basic usage\" /></p>\n<h2 id=\"trombonezoomlikeeffectwithcamerafov\">\"Trombone zoom\"-like effect with camera FOV</h2>\n<p>A visual effect that fascinates me is varying between <a href=\"http://gamedev.stackexchange.com/questions/22277/difference-between-orthogonal-map-and-isometric-map\">the \"flat\" orthogonal or isometric</a> projection, and a true 3D perspective. By tweaking camera distance and FOV, you can achieve something very close to orthogonal or isometric projections. I played around with a few formulas, and eventually managed to create a single attribute that can tweak the perspective in this way: <code>trombone_fov</code>. I'm not sure if the forumla I used is the \"correct\" formula (I ended up with <code>distance = cotan(fov_y) * desired_distance</code>), but the effect is really cool nonetheless, and a nice trick for either juice, or platformers that rely on visual trickery (a la <a href=\"https://en.wikipedia.org/wiki/Fez_(video_game)\">Fez</a>).</p>\n<p>In this GIF, it starts at nearly orthogonal, and then \"becomes 3D\":</p>\n<blockquote>\n<p><a href=\"https://en.wikipedia.org/wiki/Dolly_zoom\">Dolly zoom</a> is a effect in film photography, where you move the camera while adjusting the zoom. I don't know a lot about film-making, but it seems very similar to what I'm doing here.</p>\n</blockquote>\n<p><img src=\"../content/images/2017/02/godot_pannable_camera.gif\" alt=\"Example trombone effect\" /></p>\n<p>It's also useful for contrasting visual styles, which is the main reason I added it as a feature. At an angle closer to the ground, you can see it go from orthogonal to a more \"fish-eye\" look:</p>\n<p><img src=\"../content/images/2017/02/godot_pannable_camera_3.gif\" alt=\"Example trombone effect 2\" /></p>\n<h2 id=\"usage\">Usage</h2>\n<p><a href=\"https://bitbucket.org/michaelb/godot-pannable-camera/src\">Get it from BitBucket</a>. It extends the <a href=\"http://docs.godotengine.org/en/stable/classes/class_camera.html\">built-in Camera</a>, so you can use it like you would a normal camera. Beyond that, it exposes a few extra script vars that let you configure it, as explained in the README.</p>\n<h3 id=\"contributions\">Contributions</h3>\n<p>Please fork and submit pull requests if you have anything cool to add! Especially to correct my dolly zoom formula. I for one plan on continuing to add to it, as a part of a cool TBA game I'm working on.</p>\n</section>\n</article>\n</div>"
  },
  {
    "id": 20,
    "title": "Wow, I&#x27;ve made quite a few free Godot packages by now",
    "slug": "ive-written-quite-a-few-godot-packages",
    "text": "<article class=\"content post tag-godot tag-game-dev\">\n<h1 class=\"title\">Wow, I&#x27;ve made quite a few free Godot packages by now</h1>\n<section class=\"post-content\">\n<p>I've noticed I've written a total of 9 open source packages for the <a href=\"https://godotengine.org/\">Godot engine</a>! I'm pretty pleased with this number, nothing makes me happier than giving back to the world of free software. I created a page that I'll keep updated with links to all of the repos:</p>\n<ul>\n<li><a href=\"../godot-packages/index.html\">http://michaelb.org/godot-packages/</a></li>\n</ul>\n<p>This includes both ones I've mentioned on my blog, and a few that are still too WIP to be much use to any one else. For the time being they only exist as git repos, eventually I may see how to integrate them into Godot's asset store. I'm also pleased to note that game development can be done in a quite modular fashion following similar practices to other software dev.</p>\n<p>Here's a GIF of the most recent thing I've been working on... once finished I'll post a full post describing it's usage:</p>\n<p><img src=\"../content/images/2017/03/godot_responsive_2.gif\" alt=\"godot-responsive\" /></p>\n</section>\n</article>\n</div>"
  },
  {
    "id": 21,
    "title": "Godot Gestures: Pinch, twist, and drag gesture detection for mobile games",
    "slug": "godot-gestures",
    "text": "<article class=\"content post tag-godot tag-game-dev tag-mobile tag-gestures\">\n<h1 class=\"title\">Godot Gestures: Pinch, twist, and drag gesture detection for mobile games</h1>\n<section class=\"post-content\">\n<p>As it turns out, writing gesture detection is not an easy task. I gave it a shot anyway, and wrote a re-usable scene for the awesome free software <a href=\"http://godotengine.org/\">Godot Game Engine</a>.</p>\n<p>It all started <a href=\"../p/12b0a44e-b576-4eed-bd27-2a4e6124d960/index.html\">when I decided to switch the focus of my work-in-progress game Sawdust to \"mobile-first\"</a>. To provide a more tactile and intuitive interface, I needed to detect \"twist\" gestures for rotating pieces, and \"double-tap\" gestures for placing them. Down the rabbit hole I went, and I built a re-usable drop-in script for detecting a variety of gestures on mobile.</p>\n<h3 id=\"godotgesturelibrary\">godot-gesture library</h3>\n<p>The code is MIT-licensed and ready to drop into your project, so if you want twist, pinch, two-finger drag, or double-tap gesture detection within your project, get it here:</p>\n<ul>\n<li><a href=\"https://bitbucket.org/michaelb/godot-gesture\">Godot Gesture</a></li>\n</ul>\n<p><img src=\"../content/images/2017/03/godot_gestures_2.gif\" alt=\"Example, debugging on computer\" /></p>\n<h3 id=\"methodology\">Methodology</h3>\n<p>It's quite likely I wasn't looking in the right places, but I couldn't find any readily usable information on detecting these gestures, so the general philosophy I used is as follows:</p>\n<ul>\n<li><p>Gesture events only register when the 2nd finger is lifted</p></li>\n<li><p>\"Votes\" are summed up for how closely it follows certain rules to trigger each of the 3 events checked</p></li>\n<li><p>The event with the highest vote \"wins\" and is triggered</p></li>\n</ul>\n<p>Tap and double-tap events are easy. Two-finger drag is fairly easy too. Things get trickier with pinch, twist, and distinguishing between these three. The \"votes\" for each event then are as follows:</p>\n<ul>\n<li><p>If one finger crosses an axis of the average position of the other, while keeping roughly the same distance from it, then that is a twist event, with the consistency of the distance determining it's \"votes\"</p></li>\n<li><p>If the distance traveled of two fingers roughly \"cancels each other out\" when summed as vector, then its a pinch in or out, with \"how opposite\" the two vectors are being the votes</p></li>\n<li><p>If the vector traveled of two fingers is roughly the same, then it's a two finger drag event, with the average distance being the votes</p></li>\n</ul>\n<p>As I said, not sure if these are the best criteria, but after tweaking a few thresholds it seems to work fairly well on my tablet device, certainly well enough for my usage. I'd love to see better implementations, however.</p>\n<hr />\n<p><em>Update: I added event debouncing to distinguish simple drags / taps.</em></p>\n</section>\n</article>\n</div>"
  },
  {
    "id": 22,
    "title": "My pre-post-mortem of rescuing my scope creeped-out puzzle game",
    "slug": "sawdust-pre-post-mortem",
    "text": "<article class=\"content post tag-game-dev tag-self-management\">\n<h1 class=\"title\">My pre-post-mortem of rescuing my scope creeped-out puzzle game</h1>\n<section class=\"post-content\">\n<p>It's been nearly 6 months now that I <a href=\"../about/index.html\">jumped head-first into game development</a>, I've had a fantastic time so far.</p>\n<p>During these 6 months, in addition to <a href=\"https://codingbootcamp.berkeley.edu/\">teaching a program on web development</a>, I've been working primarily two game concepts: One ambitious 3D game that is still top-secret <sup id=\"fnref:1\"><a href=\"../p/12b0a44e-b576-4eed-bd27-2a4e6124d960/index.html#fn:1\" rel=\"footnote\">1</a></sup>, and another, <a href=\"../sawdust/index.html\">Sawdust</a>, that is a a short-and-sweet 2D game that I wanted to complete in a short amount of time. Sawdust was intended as a trial-run for my future games, and an opportunity to learn and make mistakes. In this last regard, it's been wildly successful: I've made a lot of mistakes, and am learning a lot.</p>\n<h2 id=\"launchingoffintospace\">Launching off into space...</h2>\n<p><img src=\"../content/images/2016/10/opening_spin_smaller.gif\" alt=\"Space, the final frontier of scope creep\" /></p>\n<p>I probably should have noticed something was going wrong when my simple puzzle game blasted off in a rocket-ship to outer-space. I had written a grand story set in deep-space involving colony ships, sentient AI's, and a zen-like questioning of life and existence. I was knee-deep in equipping the soundtrack with timpanis, brass sections, and soaring sawtooth synths. I had the fundamentals mechanics written (designed with customizable controller support via a custom-launcher), and the foundational levels and initial cutscenes written, and a smattering of \"juicy\" effects.</p>\n<blockquote>\n<iframe width=\"200\" height=\"100\" scrolling=\"no\" frameborder=\"no\" src=\"https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/286869431&amp;auto_play=false&amp;hide_related=false&amp;show_comments=true&amp;show_user=true&amp;show_reposts=false&amp;visual=true\"></iframe>\n</blockquote>\n<p>And then I realized I had a problem. After 5 months of part-time effort, I was maybe 30-50% done with this game, and I really didn't even like it that much. I had set out to write simple Tetris-inspired puzzle game involving relaxingly fitting wooden blocks, which I hoped to turn around in a few months so I could jump into developing more intriguing titles. I soon realized that to make it a respectable desktop title that I could be proud of and would want to buy myself had someone else made it (my base criteria), it would require a polished story mode. I had a few plot elements floating around, so I collected those and shoe-horned them in. Then to flesh out a good 50 or so single-player levels, I needed to introduce new mechanics at a good rate. This meant more tickets, and more time, and so on. I realized this could take all year to finish, and worse yet I was simply not inspired. The final straw was learning Steam's upcoming policy changes: <a href=\"https://www.rockpapershotgun.com/2017/02/10/valve-to-abolish-steam-greenlight-open-up-with-steam-direct/\">their replacing the (admittedly broken) Greenlight process with a $5,000 registration fee</a> rendered the main focus of Sawdust, intended as a learning experience in publishing computer games, completely obsolete. I had to take drastic measures to wrap it up soon, before it all became a total waste!</p>\n<h2 id=\"andcrashingbackdowntoearth\">...and crashing back down to earth</h2>\n<p>The old rule is to estimate the time of a project, then double it. A necessary corollary is to figure out the scope of a project, then chop it in half... and again, and again, repeatedly hacking it to a stump.</p>\n<p>That's what I did. I cut it in half. I completely dropped the story aspects, I cut a lot of the more complicated gameplay features, I cut time-consuming animated backdrops and transitions, I cut desktop and controller support. Instead, I decided to focus entirely on Android and iOS. Mobile games have lower expectations. I had to have lower expectations too: I'll make my masterpiece one day, this just won't be it!</p>\n<p>It was a psychological battle to convince myself to hack off months worth of effort and release a far simpler and less appealing game, but it was a battle that I won. (Technically, I also lost it, since it was a battle with myself, but maybe this is why I should have my analogy license revoked.) If I hadn't won it, I think I would still be hacking away at an ever-growing project, or more likely, just giving up entirely and focusing my efforts on another game, rendering all the time I had spent on it over the last 6 months a waste.</p>\n<blockquote>\n<p><img src=\"http://imgs.xkcd.com/comics/estimating_time.png\" alt=\"Obligitory xkcd\" title=\"\" /></p>\n</blockquote>\n<h2 id=\"wastingnothing\">Wasting nothing</h2>\n<p>In the end, not much effort was wasted:</p>\n<ol>\n<li><p>Some of the code I created is in the form of <a href=\"../godot-packages/index.html\">re-usable free software packages</a>. This means that I (along with anyone else) can benefit from my tangents in the future. If I learned one thing, it's that modular design is great for games, too: while it's a bit more effort, it results in less waste in the long run!</p></li>\n<li><p>All the code I put into the \"campaign mode\" can be released as a sequel. I realized if it was released as mobile, it could be released in parts. \"Sawdust 1\" can consist of just the \"arcade\" mode (the basic mode that was most complete), and \"Sawdust 2\" can consist of the series of story-related puzzles that is half-done, and most ambitious in scope. Realistically, I realize I may never get around to Sawdust 2, but if Sawdust 1 goes better than I expect, then it's always an option, and then I'll have twice as many games under my belt!<sup id=\"fnref:2\"><a href=\"../p/12b0a44e-b576-4eed-bd27-2a4e6124d960/index.html#fn:2\" rel=\"footnote\">2</a></sup></p></li>\n<li><p>This was a learning project. I started it with the intention of learning game dev, but more importantly game dev <em>product management</em>. I wanted to build my intuition for just how hard it is to complete a video game.</p></li>\n</ol>\n<p>I made these decisions a few weeks ago. Writing this post now, I think it's safe to say that this \"pre-post-mortem\" prevented this project from being postponed indefinitely. So, if you are at the 50% mark of your own project, and realize the remaining 50% is lot more than 50% and you are dangerously losing interest... consider doing a pre-post-mortem like I did, and chop, chop away!</p>\n<hr />\n<div class=\"footnotes\"><ol><li class=\"footnote\" id=\"fn:1\"><p>Maybe because I haven't really figured it out myself... <a href=\"../p/12b0a44e-b576-4eed-bd27-2a4e6124d960/index.html#fnref:1\" title=\"return to article\">\u21a9</a></p></li>\n<li class=\"footnote\" id=\"fn:2\"><p>Success in game development is measured in shovelfuls, right? <a href=\"../p/12b0a44e-b576-4eed-bd27-2a4e6124d960/index.html#fnref:2\" title=\"return to article\">\u21a9</a></p></li></ol></div>\n</section>\n</article>\n</div>"
  },
  {
    "id": 24,
    "title": "Ludum Dare 38",
    "slug": "ludum-dare-38",
    "text": "<article class=\"content post tag-game-dev tag-ludumdare\">\n<h1 class=\"title\">Ludum Dare 38</h1>\n<section class=\"post-content\">\n<p>I'm all ready to start <a href=\"https://ldjam.com/\">Ludum Dare 38</a>!</p>\n<p>In case you don't know, it's a game dev competition / game jam to make an entire game in 48 hours. It'll be my first go at it, so I'm super pumped.</p>\n<p><img src=\"../content/images/2017/04/IMG_20170421_155326993.jpg\" alt=\"All ready to work!\" /></p>\n</section>\n</article>\n</div>"
  },
  {
    "id": 25,
    "title": "The Blocklings",
    "slug": "the-blocklings",
    "text": "<article class=\"content post tag-ludumdare tag-game\">\n<h1 class=\"title\">The Blocklings</h1>\n<section class=\"post-content\">\n<p>I had a blast with my Ludum Dare 38 Compo entry!</p>\n<p>It's a short (but complete!) puzzle game with 9 levels, something of a cross between Lemmings and Minecraft. Check it out here:</p>\n<iframe frameborder=\"0\" src=\"https://itch.io/embed/137394?border_width=0&amp;bg_color=363636&amp;fg_color=ffffff&amp;link_color=ffaf24&amp;border_color=363636\" width=\"100%\" height=\"165\"></iframe>\n<p>Pretty rough in spots, and programmer art galore, but I'm happy with how it turned out. I'll probably revisit it in week or two, as it serves I think as a pretty solid proof of concept.</p>\n<blockquote>\n<iframe width=\"300\" height=\"150\" scrolling=\"no\" frameborder=\"no\" src=\"https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/319091197&amp;auto_play=false&amp;hide_related=false&amp;show_comments=true&amp;show_user=true&amp;show_reposts=false&amp;visual=true\"></iframe>\n</blockquote>\n<p><img src=\"../content/images/2017/04/blocklings_flautist_of_worlds.gif\" alt=\"The Blocklings\" /></p>\n</section>\n</article>\n</div>"
  },
  {
    "id": 26,
    "title": "Sawdust",
    "slug": "sawdust",
    "text": "<article class=\"content post tag-game tag-game-dev tag-release\">\n<h1 class=\"title\">Sawdust</h1>\n<section class=\"post-content\">\n<p><a href=\"https://play.google.com/store/apps/details?id=org.michaelb.sawdust\"><img src=\"../content/images/2017/06/sawdust_gameplay.gif\" alt=\"Sawdust Gameplay\" title=\"\" /><br /><img src=\"http://lrg.michaelb.org/google.png\" alt=\"Get it on Google Play\" title=\"\" /></a>\n<br /></p>\n<p>Drag and drop blocks onto the board to rack up points and advance to the next level in this addictive new spin on the classic game of tangrams.</p>\n<p>Two different modes cater to both casual and hardcore-puzzler game styles:</p>\n<ul>\n<li><p>Zen mode allows you to take your time to use the best strategy to conquer each board</p></li>\n<li><p>Arcade mode forces you to think quick to conquer every level before your sawdust runs out</p></li>\n</ul>\n<p>Mess up? Hit \"try again\" and give it another go. I'll warn you, you might get addicted!</p>\n<p>Psst: Want a spoiler? Get far enough, and you'll unlock ADVANCED MODE... get even farther, and unlock IRON MODE: a fun/addictive/frustrating experience.... no powerups, and no room for mistakes!</p>\n<p>The game features: <br />\n- 20 distinct power levels which offer dozens of different power ups\n- Increasingly difficult board levels that offer endless challenge\n- Original music\n- No in-game transactions, it's just you, your wits, and a bit of luck!</p>\n<p>Are you up to the challenge?</p>\n</section>\n</article>\n</div>"
  },
  {
    "id": 27,
    "title": "Releasing Sawdust: Mini-post-mortem",
    "slug": "releasing-sawdust",
    "text": "<article class=\"content post tag-game-dev\">\n<h1 class=\"title\">Releasing Sawdust: Mini-post-mortem</h1>\n<section class=\"post-content\">\n<p>A couple months ago <a href=\"../p/12b0a44e-b576-4eed-bd27-2a4e6124d960/index.html\">I wrote about realizing \"enough was enough\" with my feature-creeped game</a>. Along with working on other projects, I spent some time in the next couple months cutting out features and polishing existing ones, all working under a \"late-May\" deadline.</p>\n<p>Now, my new (much smaller) vision for Sawdust is feature complete... and ready to roll in a few days! I'm not 100% happy with how it turned out... but it is <em>something</em>, and it definitely was a great learning experience.</p>\n<h2 id=\"lessonlearnedalwaysprototypeafewgamesorvariationsatatime\">Lesson learned: Always prototype a few games or variations at a time</h2>\n<p>While I read <a href=\"http://gamesfromwithin.com/prototyping-youre-probably-doing-it-wrong\">various advice on game prototyping</a>, and did build a Sawdust prototype, I failed to see the warning signs that the <em>prototype itself</em> has to be actually pretty fun. I thought the core concept seemed solid, so I'd add features to make it fun. Like software, \"more features\" does not mean better... one simple concept that is fun is better</p>\n<p>It's completely possible to complete an <em>actually fun</em> prototype <a href=\"https://ldjam.com/\">without a huge time investment</a>. Now I feel I need to complete at least one or two of these before I should invest time in one of them. Otherwise, you could dump days into gameplay, and the game will never quite feel like a game. While I feel that Sawdust did eventually turn into a game (only at the end, really), it was a meandering journey that could have been a lot shorter if I forced myself under time constraints to discover some kernel of \"funness\" at the heart of the concept.</p>\n<h2 id=\"lessonlearnedkeepinmindwhatcouldbereused\">Lesson learned: Keep in mind what could be re-used</h2>\n<p>This is one I mostly did right. A lot of stuff I wrote for sawdust I wrote as <a href=\"../godot-packages/index.html\">re-usable packages</a>. I also wrote about 30 minutes of a fun soundtrack which no longer fits Sawdust's smaller scope, so that can easily be reused for my next game project.</p>\n<p>I did however make a lot of content -- notably a partially finished storyline and puzzle campaign -- that won't fit into the smaller-scoped Sawdust. If I ever get the urge, I might wrap that up into a bigger game that more closely reflects the original vision.</p>\n</section>\n</article>\n</div>"
  },
  {
    "id": 28,
    "title": "Porting a legacy browser graphics JS script (JSC3D) to Node.js with node-canvas and VM",
    "slug": "porting-a-legacy-browserjs3cd-to-node-js-with-node-canvas",
    "text": "<article class=\"content post tag-3d tag-web-dev tag-javascript tag-node\">\n<h1 class=\"title\">Porting a legacy browser graphics JS script (JSC3D) to Node.js with node-canvas and VM</h1>\n<section class=\"post-content\">\n<p>In this post I will describe my my process to port JSC3D, an unmaintained 3D library that uses the browser's <code>&lt;canvas&gt;</code> 2D context, to run entirely in node.js. This allows a quite fast, easy-to-use CLI-based 3D model renderer. It looks quite good, <em>without</em> the need for GPU, making it easy to run on the server to generate previews of STL and OBJ files. Also importantly, unlike many other 3D renderers, this one can produce the same results in the browser.</p>\n<p>Hopefully this article will be useful to others considering porting graphical browser scripts to node.js!</p>\n<blockquote>\n<p>Running the command below produces the render to the right.</p>\n<p><code>\njsc3d examples/example.stl examples/example.png\n</code></p>\n<p><strong>Try it out for yourself:</strong></p>\n<p><a href=\"https://npmjs.org/package/jsc3d\"><img src=\"https://nodei.co/npm/jsc3d.png\" alt=\"NPM\" title=\"\" /></a></p>\n</blockquote>\n<p><img src=\"https://raw.githubusercontent.com/michaelpb/node-jsc3d/master/examples/example.png\" alt=\"Example render\" /></p>\n<h2 id=\"step1creatingasandboxthatsimulatesabrowserenvironment\">Step 1: Creating a sandbox that simulates a browser environment</h2>\n<p>I had a couple options at this point: I could dive into editing JSC3D to remove these references and change them to node.js referneces, or I could punt on that and just focus on getting a proof-of-concept running without modification by creating a sandbox environment for the script that simulates a browser. I went with the latter, using <a href=\"https://nodejs.org/api/vm.html\">node's awesome built-in VM module</a>. This was probably a good choice for JSC3D since everything came together pretty quickly, and I was soon able to get successful 3D renders.</p>\n<h3 id=\"howtousevmtosandboxabrowserscript\">How to use VM to sandbox a browser script</h3>\n<p>The simplest code to wrap a legacy browser script is like this:</p>\n<pre><code class=\"language-javascript\">const sandbox = {};  \nconst context = new vm.createContext(sandbox);  \nconst scriptLoader = new vm.Script(fs.readFileSync('./assets/browserScript.js'));  \nscriptLoader.runInContext(context);  \nmodule.exports = sandbox.JSC3D; // or whatever is exported  \n</code></pre>\n<p>An empty sandbox context is not enough, however, if it expects functionality from <code>document</code> and <code>window</code> objects.</p>\n<h3 id=\"trialanderrormockingofwindowanddocument\">Trial-and-error mocking of window and document</h3>\n<p>I first took a look at the <a href=\"https://github.com/michaelpb/node-jsc3d/blob/master/assets/jsc3d.js\">JSC3D source</a>, and Ctrl+F'd (<code>/</code>'d to be precise, 'cause <code>vim</code>) for the usual suspects: <code>window</code> and <code>document</code>. I was checking if it expected <em>too much</em> functionality from these, in which case I might be better off using a heavier weight solution like PhantomJS which will run it in a true browser. However, to my delight it only expected these objects to be populated with a few functions, and those were only used really for some debugging and interactive features that I did not need.</p>\n<p>It was easy to stub out all that was necessary:</p>\n<pre><code class=\"language-javascript\">const sandbox = {  \n    window: {\n        pageXOffset: 0,\n        pageYOffset: 0,\n        navigator: {userAgent: 'Chrome 0'} // look like chrome\n    },\n    document: {\n        addEventListener: () =&gt; {},\n        body: {\n            appendChild: () =&gt; {},\n            createElement: () =&gt; ({style: {}}),\n            scrollLeft: 0,\n            scrollTop: 0,\n        },\n    },\n};\n</code></pre>\n<h2 id=\"step2mockingoutxmlhttprequest\">Step 2: Mocking out XMLHttpRequest</h2>\n<p>JSC3D uses <code>XMLHttpRequest</code> to request data from URLs. Since I was porting to node.js, I wanted it instead to read data from the local filesystem. This too turned out to be pretty easy to mock:</p>\n<pre><code class=\"language-javascript\">class XMLHttpRequest {  \n    open(method, urlPath) {\n        this.path = urlPath;\n    }\n    setRequestHeader() {}\n    overrideMimeType() {}\n    abort() {}\n    send() {\n        fs.readFile(this.path, (error, data) =&gt; {\n            if (error) throw error;\n            this.status = 200;\n            this.readyState = 4;\n            this.responseText = data.toString();\n            this.onreadystatechange(); // call callback\n        });\n    }\n}\n</code></pre>\n<h2 id=\"step3usingnodecanvastosimulaterendering\">Step 3: Using node-canvas to simulate rendering</h2>\n<p>Finally, I need JSC3D to render to <a href=\"https://www.npmjs.com/package/canvas\">node-canvas</a> instead of a real <code>&lt;canvas&gt;</code> tag, which is an in-memory canvas implementation that leverages C++ bindings to the <code>libcairo</code> 2D graphics system package. This was really easy... the only hiccup being I had to monkey-patch in a dummy addEventListener stub:</p>\n<pre><code class=\"language-javascript\">let canvas = new Canvas(1170, 585);  \ncanvas.addEventListener = () =&gt; {};  \nlet viewer = new JSC3D.Viewer(canvas);  \n</code></pre>\n<p>At this point, everything worked, and it was successfully running renders on JSC3D.</p>\n<p>To improve performance, I stubbed out a couple other things:</p>\n<ol>\n<li>I stubbed out <code>setTimeout</code> with a dummy function that did nothing. This was because it was using <code>setTimeout</code> to create a re-rendering loop, which is unnecessary since I was synchronously rendering it after loading by manually calling <code>viewer.doUpdate()</code> </li>\n<li>Edit my mock XMLHttpRequest to add in \"on load\" events, so that scripts using <code>node-jsc3d</code> could be aware when the loading of the model from disk was complete.</li>\n</ol>\n<h2 id=\"futurestepsfornodejsc3d\">Future steps for node-jsc3d</h2>\n<p>There's plenty of low-hanging fruit:</p>\n<ul>\n<li>Elminate <code>node-canvas</code> dependency (it's mostly just pixel manipulations that could be done to a <code>Buffer</code>)</li>\n<li>Rewrite to leverage node's Buffers</li>\n<li>Generally start diving into JSC3D to bring the script up to modern standards (unit tests, leveraging built-in node features, ES6 syntax), while writing it in a way that it still can be Babel compiled to support browsers.</li>\n</ul>\n<p><a href=\"https://github.com/michaelpb/node-jsc3d\">And of course, pull requests are welcome!</a></p>\n</section>\n</article>\n</div>"
  },
  {
    "id": 29,
    "title": "Bash profile trick: Open last used directory when starting a new terminal emulator",
    "slug": "bash-profile-trick-open-last-used-directory-when-starting-a-new-terminal-emulator-2",
    "text": "<article class=\"content post tag-snippet tag-web-dev tag-linux tag-bash\">\n<h1 class=\"title\">Bash profile trick: Open last used directory when starting a new terminal emulator</h1>\n<section class=\"post-content\">\n<p>As I was configuring my new system (using <abbr title=\"e.g. configuration files like your bash profile settings or vimrc\">dotfiles</abbr> configuration app I wrote for this purpose: <a href=\"https://github.com/michaelpb/stowage/\">stowage</a>), I was exploring the current options for minimalist terminal emulators, and I realized a common pattern I wanted was for new terminals to pop up in the same working directory that I was using. Now, more feature-filled (and resource-hungry) terminal emulators often provide a <code>Ctrl+Shift+N</code> short-cut that will open a new window in the same working directory, but I wanted that feature to be universal.</p>\n<p>So, I realized I could do this with a little bash profile hackery!</p>\n<p>Here's the snippet I wrote in my bash profile:</p>\n<pre><code>LAST_PWD_PATH=\"~/.bash_last_pwd\"\n\nfunction cd() {  \n    builtin cd \"<a href=\"../cdn-cgi/l/email-protection\" class=\"__cf_email__\" data-cfemail=\"745034\">[email&#160;protected]</a>\"\n    echo `pwd` &gt; \"$LAST_PWD_PATH\"\n}\n\nif [ -f \"$LAST_PWD_PATH\" ]; then  \n    builtin cd `cat $LAST_PWD_PATH`\nfi  \n</code></pre>\n<p>This overrides the built-in <code>cd</code> command to remember the location that you are change to. Then, if such a file exists, attempts to start every new bash session by <code>cd</code>ing to that directory.</p>\n<p>Hope it's useful!</p>\n</section>\n</article>\n</div>"
  },
  {
    "id": 30,
    "title": "The Right Way\u2122 to do global npm install without sudo",
    "slug": "the-right-way-to-do-global-npm-install-without-sudo",
    "text": "<article class=\"content post tag-node tag-javascript tag-tutorial tag-web-dev tag-bash\">\n<h1 class=\"title\">The Right Way\u2122 to do global npm install without sudo</h1>\n<section class=\"post-content\">\n<p>I'm writing this post since there were a lot of guides online on how to set up NPM so you can do <code>npm install -g</code> (that is, a global NPM install) on macOS or Linux without superuser privileges, but all those guides recommended a rather strange directory structure, such as a very strange looking <code>~/.npm</code> directory loose in your home folder. This is a bad idea for a several reasons.</p>\n<p>In this article I intend to show the very simple steps to set it to a much better location of <code>~/.local</code>. This follows conventions and plays nice with many different applications, on both Linux-based systems, and macOS. <sup id=\"fnref:1\"><a href=\"index.html#fn:1\" rel=\"footnote\">1</a></sup></p>\n<p>When <code>npm</code> tries to install to globally, it tries to install it's packages to the sensible location of <code>/usr/local/</code>. When you aren't a super user, this gives the warning <code>checkPermissions Missing write access to /usr/local/lib</code> and error <code>Error: EACCES: permission denied, access '/usr/local/lib'</code> and fails. Other package installers (such as Python's <code>pip</code>) already ship, at least on Ubuntu, with a concept of a user-specific local directory of <code>~/.local/</code> to replace the global <code>/usr/local/</code> to avoid such warnings.</p>\n<p>Thus, let's just reuse this existing convention.</p>\n<h4 id=\"step1configurenpm\">Step 1: Configure NPM</h4>\n<pre><code>npm config set prefix ~/.local  \n</code></pre>\n<p>Now NPM will install your global executables to <code>~/.local/bin</code>, and the libraries to <code>~/.local/lib/node_modules/</code></p>\n<h4 id=\"step2addtlocalbintoyourpath\">Step 2: Add <code>~/.local/bin</code> to your path</h4>\n<p>If you haven't already, open up the conf file of your favorite shell (such as <code>~/.bashrc</code> for Bash), and add in:</p>\n<pre><code>PATH=~/.local/bin/:$PATH  \n</code></pre>\n<p>That's it. You're done.</p>\n<p>Now, for why we are doing it this way instead of the incredibly common suggestions online of <code>~/.npm</code>. The most obvious is convention: other applications use <code>~/.local</code> also. However, <code>~/.npm</code> is particularly a terrible choice. Whatever you do, <strong>DON'T USE ~/.npm/</strong> as your user installation directory. Why is <code>~/.npm</code> such a bad choice? <code>~/.npm</code> is the default npm cache directory! Thus, if you clear the cache, you'd wipe your modules too. You can check to see what your cache directory is with <code>npm config ls -l | grep cache</code>.</p>\n<p>Now can anyone tell me why this isn't the default, and why there's so much misinformation about this online?</p>\n<div class=\"footnotes\"><ol><li class=\"footnote\" id=\"fn:1\"><p>Relevant reading: <a href=\"https://www.python.org/dev/peps/pep-0370/\">PEP 370</a>: it's about Python, but useful nonetheless <a href=\"index.html#fnref:1\" title=\"return to article\">\u21a9</a></p></li></ol></div>\n</section>\n</article>\n</div>"
  },
  {
    "id": 33,
    "title": "Web Developer to Game Developer: Understanding game dev as a web dev using Godot",
    "slug": "webdev2gamedev",
    "text": "<article class=\"content post tag-godot tag-game-dev tag-tutorial tag-game tag-web-dev\">\n<h1 class=\"title\">Web Developer to Game Developer: Understanding game dev as a web dev using Godot</h1>\n<section class=\"post-content\">\n<p>Already a front-end (or back-end) web developer, and curious about writing your own video games? Maybe want to try a new hobby in indie game dev for PC or console, or publish some mobile games? I made the transition, and so can you!</p>\n<p>I hope this 10 minute read will give you an overview of what to expect as you journey into this new (but somewhat familiar) world of game development.</p>\n<blockquote>\n<h4 id=\"whynothtml5\">Why not HTML5?</h4>\n<p>There are a lot of pretty cool HTML5 based game engines in JS that you can get hacking at right away. These are really cool, but I feel you'll quickly run up against limits if you are doing anything beyond a very basic and very web-focused game. Full game engine environments not only tend to be a lot faster, but can target mobile, desktop, and even console <em>natively</em> with much lower overhead. The only disadvantages, of course, is it's more tools to learn, but game dev is already sufficiently different to erase most advantages you might gain by coding in JavaScript.</p>\n<h4 id=\"whynotunity3d\">Why not Unity3D?</h4>\n<p>You might be confused why I wouldn't recommend Unity3D. To be honest, perhaps Unity3D <em>is</em> the right game engine for your next project -- it is much more popular than Godot, and has a large asset library and although it lacks in the 2D department, it does sport a more sophisticated 3D engine. However, if you are used to web development, you probably prioritize the same things I do in tooling: light-weight, modular, and open source -- none of which describe Unity3D. Godot fits the bill nicely: it weighs in at only 16.6 MB zipped, only adds a few MB to builds, has a familiar DOM-like node hierarchy, and has a headless CLI making Continous Delivery a cinch. There's also the fact that Unity3D is expensive: the \"pro license\", at the time of writing this article, was $125 per month, yikes!</p>\n</blockquote>\n<h1 id=\"godot\">Godot</h1>\n<p><a href=\"https://godotengine.org/download\">Godot Engine, download for macOS, GNU/Linux, and Windows.</a></p>\n<p>If you've read any other articles on this site, it might not surprise you that I recommend using free and open source software. As a web developer, this probably seems like a natural choice, as almost all the tools that power the web, from the Linux servers to frameworks like Rails or Django, are FLOSS. The advantages of this: Open APIs, community of helpful people, and lightweight and customizable dev environments.</p>\n<p>While game development has not yet caught the free software bug like web dev has, this is quickly changing as <a href=\"../getting-started-with-linux-game-development/index.html\">more and more FOSS game dev tools are popping up</a>. Out of them, I'd personally advocate using Godot, for the following reasons:</p>\n<ol>\n<li>It's an actively developed, free open source project with a friendly community </li>\n<li>It's all-inclusive: Tooling in game development is pretty awful to begin with compared to web dev, Godot has the potential to fix that </li>\n<li>It lets you develop on and for all platforms, including deploying to the web<sup id=\"fnref:1\"><a href=\"index.html#fn:1\" rel=\"footnote\">1</a></sup> </li>\n<li>It has first-class 2D and 3D<sup id=\"fnref:1\"><a href=\"index.html#fn:1\" rel=\"footnote\">1</a></sup> support </li>\n<li>It's incredibly lightweight and flexible compared to every other engine of comparable features out there </li>\n<li>It's language and structure is easy for web developers to pick up</li>\n</ol>\n<p>With that in mind, I'll try to explain the key concepts of Godot in a way that web developers should find easy to understand.</p>\n<h1 id=\"thedomofgodotgodotsscenestructure\">The DOM of Godot: Godot's scene structure</h1>\n<p>Everything in your Godot game exists in a hierarchy with some methods familiar to any front-end programmer (<code>get_parent()</code>, just like JavaScript's <code>parent()</code>, and <code>node.get_node('MyNode')</code> is somewhat similar to <code>node.querySelector('MyNode')</code>).</p>\n<blockquote>\n<p><img src=\"../content/images/2017/09/Selection_001.png\" alt=\"DOM of Godot\" title=\"\" /></p>\n</blockquote>\n<ul>\n<li>Your <code>Node2D</code> or <code>Spatial</code> are more or less \"blank\" elements -- kind of like your divs or spans</li>\n<li>If you are coding a 2D game, most things are absolutely positioned to the top-left corner of the screen, with the exception of GUI elements, which can be anchored to screen edges</li>\n<li>If you are coding a 3D game, everything is absolutely positioned from a 3D origin <code>(0, 0, 0)</code>.</li>\n<li>Every scene can have both 2D and 3D elements: By default, the 2D elements float above the 3D elements, enabling you to make a 3D game but make your GUI in \"true\" 2D</li>\n</ul>\n<h2 id=\"thedevtoolsofgodot\">The \"Dev Tools\" of Godot</h2>\n<p>Godot's GUI offers a node hierarchy inspector much like dev tools. Ensure you run your game with <em>Remote debug</em> and <em>Sync scene changes</em> enabled (Click on the little \"Broadcast\" icon near the play button). With this on, when you make changes while the game is running, you'll see them reflected immediately in the game. You can utilize this just as you would Dev Tools: get the bulk of the work done ahead of time, then make final tweaks and adjustments to polish up your scene. This even works when running on mobile!</p>\n<p>Godot also affords some powerful inspection and profiling tools. You can profile code, memory usage, and also inspect the live scene tree (\"DOM\"). </p>\n<p><img src=\"../content/images/2017/09/Selection_002.png\" alt=\"Profiling Godot games\" /></p>\n<h2 id=\"componentization\">Componentization</h2>\n<p>You can save scenes in separate files -- this is similar to componentizing with web frameworks like React or Polymer. These can be re-used just like a regular node.</p>\n<p>Scenes saved in separate files can expose typed properties (much like React propTypes) using the <code>export</code> syntax, for example for an integer between 0 and 90, <code>export var(int, 0, 90) angle</code>. This not only exposes the property to outer code and enables getters and setters, but also exposes it in the GUI so you can do live tweaking of it (see above).</p>\n<p>Extension is also possible, although I'd generally advocate using composition vs extension as much as possible with Godot, since sometimes extension can lead to some finicky situations.</p>\n<ul>\n<li><a href=\"http://docs.godotengine.org/en/latest/reference/gdscript.html#exports\">Click here for more information on exporting properties</a></li>\n</ul>\n<h1 id=\"keepingthingsneat\">Keeping things neat</h1>\n<h2 id=\"externaleditorswithgodot\">External editors with Godot</h2>\n<p>If you have a strong preference for text editors, like I do, then you should be happy to learn that Godot is generally agnostic when it comes to editing. In fact, you don't need to use the Godot IDE at all, since even the scene files are plain-text and easily editable, in an ini-ish format.</p>\n<ul>\n<li><a href=\"https://github.com/beefsack/GDScript-sublime\">GDScript syntax highlighting for Sublime Text</a> </li>\n<li><a href=\"https://github.com/quabug/vim-gdscript\">GDScript syntax highlighting for Vim</a></li>\n</ul>\n<h2 id=\"repositorystructure\">Repository structure</h2>\n<p>As with web development, you'll want to put all your code in a git or mercurial repo. You likely will want to setup Large File Store in git so it won't churn quite so much on huge binary assets.</p>\n<p>I've seen a few different repo structures for game code, but this is the one I use:</p>\n<pre><code>game/  \n    - engine.ini\n    - scripts/\n        - Hero.gd\n    - scenes/\n        - Hero.tscn\n    - images/\n        - hero_sprite_sheet.png\n    - etc\nmsrc/  \n    - Media source file\n    - xcfs, psds, etc\nnotes/  \n    - Design documents, TODOs\n</code></pre>\n<hr />\n<div class=\"footnotes\"><ol><li class=\"footnote\" id=\"fn:1\"><p>While Godot 2's web and 3D support are passable, Godot 3, with a release just around the corner, will <a href=\"https://godotengine.org/article/godots-new-renderer-progress-report-3\">offer spectacular improvements to 3D</a>, and <a href=\"https://godotengine.org/article/mozilla-awards-godot-engine-part-moss-mission-partners-program\">partner with Mozilla to deliver first class web export support</a>, surpassing all other options. <a href=\"index.html#fnref:1\" title=\"return to article\">\u21a9</a></p></li></ol></div>\n</section>\n</article>\n</div>"
  },
  {
    "id": 34,
    "title": "Snippet: Draining all pending coroutines with Python 3&#x27;s async features",
    "slug": "snippet-draining-all-pending-coroutines-with-python-3s-async-features",
    "text": "<article class=\"content post tag-web-dev tag-snippet tag-python tag-async\">\n<h1 class=\"title\">Snippet: Draining all pending coroutines with Python 3&#x27;s async features</h1>\n<section class=\"post-content\">\n<p>When writing tasks for asynchronous functions in Python 3 I realized I needed a way to run through all tasks that were queued up with <code>asyncio.ensure_future</code> and similar functions. I wrote an async function to do this. The result is a little hacky, as it needs to catch certain errors that are thrown in Python 3.5.x and Python 3.6.x when you attempt to await a task that is currently the current task.</p>\n<script src=\"https://gist.github.com/michaelpb/6438e127fdf882da756f80efe2d8d27e.js\"></script>\n<p>Released into public domain fwiw.</p>\n</section>\n</article>\n</div>"
  },
  {
    "id": 35,
    "title": "JavaScript syntax cheat-sheet for total newbies",
    "slug": "javascript-syntax-cheat-sheet-for-total-newbies",
    "text": "<article class=\"content post tag-javascript tag-web-dev tag-cheat-sheet tag-learning\">\n<h1 class=\"title\">JavaScript syntax cheat-sheet for total newbies</h1>\n<section class=\"post-content\">\n<p>Earlier this year I realized that there aren't any good cheat-sheets for students new to JavaScript and coding in general to learn the (relatively dense!) syntax of JavaScript. Today I decided to make my own!</p>\n<p>In the past I've really like printing up cheat-sheets as I learned new technologies. It's a great thing to have taped to the wall or desk in front of you. Most existing JavaScript cheat-sheets are either too advanced or unclear, or have factual issues, or are poorly formatted and lack syntax highlighting or span many pages. Mine is condensed to one page and is made to be as clear as possible for JS noobs.</p>\n<h1 id=\"downloadithere\">Download it here</h1>\n<ul>\n<li><p><a href=\"https://github.com/michaelpb/cheatsheets/raw/master/newbie_javascript_syntax/javascript_syntax_cheatsheet.pdf\">JavaScript Syntax Cheat Sheet: Single page PDF version</a></p></li>\n<li><p><a href=\"https://github.com/michaelpb/cheatsheets/blob/master/newbie_javascript_syntax/javascript_syntax_cheatsheet.md\">JavaScript Syntax Cheat Sheet: Markdown version (slightly different, but mostly the same)</a></p></li>\n</ul>\n<p>This will be the first in a series of cheat-sheets aimed at coders and programming newbies learning new technologies.</p>\n<h1 id=\"preview\">Preview</h1>\n<p>I'd recommend using the <a href=\"https://github.com/michaelpb/cheatsheets/raw/master/newbie_javascript_syntax/javascript_syntax_cheatsheet.pdf\">1 page PDF version</a> version, since I will keep it updated and likely add or correct stuff as I go along, but a partial preview is available below:</p>\n<h2 id=\"basics\">Basics</h2>\n<blockquote>\n<p>Assignment: Put data into variables. New variables are \"declared\" with\n<code>var</code> keyword.</p>\n</blockquote>\n<pre><code class=\"language-javascript\">var a = 5;  \nvar name = \"Alex\";  \nvar isReadyToLearn = true;  \nname = \"Pat\";  \n</code></pre>\n<blockquote>\n<p>Expressions: In many places in JavaScript, such as in assignment,\nJavaScript expects \"expressions\", that can be like math formulas.</p>\n</blockquote>\n<pre><code class=\"language-javascript\">var a = 10;  \nvar d = 4;  \nc = c + (d * 3);  \n</code></pre>\n<blockquote>\n<p>Boolean expressions: Expressions can also compute the \"truth\" of\nconditions, resulting in values of <code>true</code> or <code>false</code>.</p>\n</blockquote>\n<pre><code class=\"language-javascript\">var isPrepared = true;  \nvar timeSpent = 5;  \nvar readyToStart = isPrepared &amp;&amp; timeSpent &gt; 3;  \n</code></pre>\n<h2 id=\"debugging\">Debugging</h2>\n<blockquote>\n<p>Console log: To output data to the console (either in the browser or node.js terminal), use <code>console.log</code>. Variables can outputed by separating with commas.</p>\n</blockquote>\n<pre><code class=\"language-javsacript\">console.log('Hello there!');  \nvar a = 0;  \nconsole.log('The value of a is ', a);  \n</code></pre>\n<h2 id=\"datatypes\">Data types</h2>\n<blockquote>\n<p>Array: Numbered of data, each numbered starting with 0.</p>\n</blockquote>\n<pre><code class=\"language-javascript\">var array = ['sam', 900, false];  \nconsole.log('Name is ', array[0]);  \nconsole.log('Age is ', array[1]);  \n</code></pre>\n<blockquote>\n<p>Object: Like a \"dictionary\" list of definitions, consists of associated\nkey and value pairs. Properties can be accessed with either <code>.</code> or <br />\n<code>[]</code>.</p>\n</blockquote>\n<pre><code class=\"language-javascript\">var myObj = {  \n    name: 'Sam',\n    age: 900,\n};\nconsole.log('Name is ', myObj.name);  \nconsole.log('Age is ', myObj['age']);  \n</code></pre>\n<h2 id=\"conditionals\">Conditionals</h2>\n<blockquote>\n<p>If-Statement: Conditionally execute the code in the curly-braces <code>{ }</code></p>\n</blockquote>\n<pre><code class=\"language-javascript\">if (a &gt; 3) {  \n    console.log('A is greater than 3');\n}\n</code></pre>\n<blockquote>\n<p>If-Else-Statement: Presents two code paths, conditionally executing one\nblock of code or the other.</p>\n</blockquote>\n<pre><code class=\"language-javascript\">if (name === \"Alex\") {  \n    console.log('Hi Alex');\n} else {\n    console.log('Hey there stranger');\n}\n</code></pre>\n<h2 id=\"loops\">Loops</h2>\n<blockquote>\n<p>While-Loop: Like <code>if</code>, except it repeats, possibly forever, until the\ncondition no longer is true.</p>\n</blockquote>\n<pre><code class=\"language-javascript\">var a = 0;  \nwhile (a &lt; 5) {  \n    console.log('Increasing value of a...');\n    a = a + 1;\n}\n</code></pre>\n<blockquote>\n<p>For-Loop: An older form of loop that has a special syntax, conventionally\nused only for looping through arrays.</p>\n</blockquote>\n<pre><code class=\"language-javascript\">var array = ['pat', 'alex', 'max', 'sam'];  \nfor (var i = 0; i &lt; array.length; i++) {  \n    var item = array[i];\n    console.log('The name is ', item);\n}\n</code></pre>\n<h2 id=\"functions\">Functions</h2>\n<blockquote>\n<p>Function: Stores the code between the curly-braces\n<code>{ }</code> for later re-use.</p>\n<p>Function call: Executes the function</p>\n</blockquote>\n<pre><code class=\"language-javascript\">var myFunction = function () {  \n    console.log('This code can be reused...');\n};\nmyFunction();  \n</code></pre>\n<blockquote>\n<p>Named function: Shortcut for giving a function a name, same behavior.</p>\n</blockquote>\n<pre><code class=\"language-javascript\">function myFunction () {  \n    console.log('This code can be reused...');\n};\nmyFunction();  \n</code></pre>\n<blockquote>\n<p>Parameters: Functions (both named and otherwise) use parameters as \"input\"\nin order to be more re-usable.</p>\n<p>Return statement: Use to send data back to the caller.</p>\n</blockquote>\n<pre><code class=\"language-javascript\">function addAndMultiply (a, b) {  \n    return a + b + (a * b);\n}\nvar total = addAndMultiply(10, 5);  \nvar total2 = addAndMultiply(total, 100);  \nconsole.log('Final calculation: ', total2);  \n</code></pre>\n</section>\n</article>\n</div>"
  },
  {
    "id": 36,
    "title": "Snippet: Implement an ability cooldown (in the Godot game engine)",
    "slug": "godot-ability-cooldown-snippet",
    "text": "<article class=\"content post tag-game-dev tag-snippet tag-godot\">\n<h1 class=\"title\">Snippet: Implement an ability cooldown (in the Godot game engine)</h1>\n<section class=\"post-content\">\n<p>Perhaps you are working on an action game or action RPG where different abilities need different cooldowns, but here's a tiny snippet that can be a re-usable Cooldown utility to check for when abilities can be re-used. Also useful for \"rate-limiting\" in general, e.g. adding a maximum rate of fire.</p>\n<p>The top part would go into a <code>Cooldown.gd</code> file, that you then include in another file to use as a class (the bottom part shows example usage).</p>\n<script src=\"https://gist.github.com/michaelpb/b150f26e2efb30fb557741645c6c1436.js\"></script>\n<p>Released into Public Domain.</p>\n</section>\n</article>\n</div>"
  },
  {
    "id": 37,
    "title": "Introducing: Whiteboard",
    "slug": "introducing-whiteboard",
    "text": "<article class=\"content post tag-web-dev tag-whiteboard tag-teaching tag-desktop tag-software\">\n<h1 class=\"title\">Introducing: Whiteboard</h1>\n<section class=\"post-content\">\n<p>I made a cool thing: Whiteboard is slideshow application for teaching programming. It embeds a code editor, terminal, and web browser into a slide-show like interface to eliminate context-switches and dead-space, while enabling more content content to be set-up ahead of time. It's great for guiding code-heavy classroom lectures, tutorials, workshops, and webinars.</p>\n<p><a href=\"http://whiteboard.michaelb.org/\"><img src=\"http://whiteboard.michaelb.org/images/icon_256.png\" alt=\"Whiteboard\" title=\"\" /></a></p>\n<p><a href=\"http://whiteboard.michaelb.org/\">Download Whiteboard for free now, for macOS, Linux, and Windows</a></p>\n<hr />\n<p>I initially developed it for my own teaching at UC-Berkeley Extensions, but I realized it might be useful for others, as well. Essentially the goal is to make a \"slide-show\" app that transforms the concept of a \"slide\" into an <em>activity</em>, as opposed to static content. Thus, the slide deck functions as a sequential collection of activities, each of which can consist of one or more sub-applications.</p>\n<h2 id=\"features\">Features</h2>\n<p>As of <code>v0.0.27</code> (which is the first known critical bug-free and feature complete build), the following \"sub-applications\" (or panes) are available:</p>\n<h4 id=\"codeeditor\">Code editor</h4>\n<ul>\n<li>Save tab layouts of multiple files for your presentations</li>\n<li>Based on ACE Editor</li>\n<li>Syntax highlighting for 100+ languages</li>\n</ul>\n<h4 id=\"webbrowser\">Web Browser</h4>\n<ul>\n<li>Have fully-functioning websites embedded in your slides</li>\n<li>Uses Chromium-based WebView, for full support for all sites no matter how complex</li>\n<li>Use to demonstrate websites as you build them</li>\n<li>Useful for webinar tutorials</li>\n</ul>\n<h4 id=\"terminal\">Terminal</h4>\n<ul>\n<li>Save a terminal to start at a working directory</li>\n<li>Useful for running example code as you write it</li>\n<li>Full color and cursor support, e.g. vim works</li>\n<li>Based on the same library (xterm.js) as VSCode</li>\n</ul>\n<h4 id=\"markdown\">Markdown</h4>\n<ul>\n<li>Easily add rich text with Markdown</li>\n<li>Useful for content-only slides</li>\n<li>Can be mixed with other panes to add instructions or context</li>\n</ul>\n<h4 id=\"saveandeditslidedecks\">Save and edit slide decks</h4>\n<ul>\n<li>By saving preset combinations of the above activities, craft a slide deck that guides the</li>\n<li>Slides can be added, deleted, and re-arranged</li>\n<li>Supports 3 layouts and several theme presets</li>\n<li>Decks can be saved, loaded, or shared</li>\n<li>Saves to a plain-text format, for easy manual tweaking</li>\n</ul>\n<p><a href=\"http://whiteboard.michaelb.org/\">It's free software under the GPL 3, so check it our (and/or contribute) now!</a></p>\n</section>\n</article>\n</div>"
  },
  {
    "id": 38,
    "title": "react-jsc3d: Porting a legacy 3D rendering JavaScript library to a reusable React.js component on NPM",
    "slug": "porting-a-jsc3d-to-react-js",
    "text": "<article class=\"content post tag-web-dev tag-tutorial tag-javascript tag-node tag-3d tag-react\">\n<h1 class=\"title\">react-jsc3d: Porting a legacy 3D rendering JavaScript library to a reusable React.js component on NPM</h1>\n<section class=\"post-content\">\n<p>Thinking of porting a legacy JavaScript library to be a re-usable React component? In this post I describe the process <a href=\"https://www.npmjs.com/package/react-jsc3d\">I used to release a React version of JSC3D</a>.</p>\n<p><img src=\"https://github.com/michaelpb/react-jsc3d/raw/master/demo/example_screenshot.jpg\" alt=\"React JSC3D rendering\" /></p>\n<hr />\n<h2 id=\"rational\">Rational</h2>\n<p>I needed a simple, fast 3D mesh ray-tracer in a React 16 project, and none of the few available seemed to work or fit the criteria. So, I decided to port the trusted old JSC3D library to react.</p>\n<h2 id=\"startingout\">Starting out</h2>\n<p>I first made the mistake of using <code>create-react-app</code> to start a new component. <strong>Don't do this</strong>, as it doesn't set up your project to be easily exported as an NPM component.</p>\n<p>Instead, I suggest using <a href=\"https://github.com/insin/nwb/#react-components-and-libraries\">nwb</a> which has a scaffolding script just for this. The command I ran:</p>\n<pre><code>nwb new react-component name-of-component  \n</code></pre>\n<h2 id=\"includingthelegacycode\">Including the legacy code</h2>\n<p>First I grabbed the legacy script in an unminified format, however concatenated into a single file. To make it easier to debug in the future, I decided to attempt to get things working with as few modifications to the legacy script as possible. Later I may start digging into modernizing the original code and adding unit tests, but for now my main goal was just wrapping it, mostly untouched.</p>\n<p>I noticed everything about JSC3D was attached to a JSC3D object. So, to expose it in the Node module system, I added the following to the top:</p>\n<pre><code>/* eslint-disable */\nvar JSC3D = JSC3D || {};  \nif (module) module.exports = JSC3D;  \n</code></pre>\n<p>The <code>/* eslint-disable */</code> disables linting for the file, since the legacy code doesn't follow linting standards at all. The rest simply exposes the JSC3D to whatever requires this as a module.</p>\n<h2 id=\"integratingwithreact\">Integrating with React</h2>\n<h3 id=\"renderingdomelementwithreference\">Rendering DOM element with reference</h3>\n<p>In order to mount the legacy code on the page, I needed React to render a <code>&lt;canvas&gt;</code> tag, and maintain a reference to it. I decided to wrap it with a <code>div</code> (to make styling easier) and attach a blank canvas element to <code>this.canvas</code>, as such:</p>\n<pre><code class=\"language-javascript\">class Jsc3dViewer extends Component {  \n    render() {\n        return (\n            &lt;div className=\"Jsc3dViewer\"&gt;\n                &lt;canvas                     ref={(canvas) =&gt; { this.canvas = canvas; }}&gt;\n                &lt;/canvas&gt;\n            &lt;/div&gt;\n        );\n    }\n}\n</code></pre>\n<h3 id=\"mountinglegacycodewithcomponentdidmount\">Mounting legacy code with <code>componentDidMount</code></h3>\n<p>Then I needed to do is initialize the legacy code when the component mounts. This was done by using the React life-cycle method <code>componentDidMount</code>:</p>\n<pre><code class=\"language-javascript\">     componentDidMount() {\n         this.viewer = new jsc3d.Viewer(this.canvas);\n         this._setProps(this.props);\n         this.viewer.init();\n     }\n</code></pre>\n<p>The <code>_setProps</code> method I created uses the <code>jsc3d</code> API to update the <code>this.viewer</code> with the React component properties. <a href=\"https://github.com/michaelpb/react-jsc3d/blob/master/src/components/Jsc3dViewer.js#L57\">You can see it here.</a></p>\n<h3 id=\"preventingreactfromupdating\">Preventing React from updating</h3>\n<p>Using the <code>shouldComponentUpdate</code> life-cycle method, I ensure that the <code>this.viewer</code> stays updated if props change (e.g., if something using this component were to change the model color or something), and also ensure that React.js doesn't overwrite the DOM:</p>\n<pre><code class=\"language-javascript\">    shouldComponentUpdate(nextProps, nextState) {\n        // Set new props\n        this._setProps(nextProps);\n\n        if (nextProps.sceneUrl !== this.props.sceneUrl) {\n            // Entirely new URL, should re-init\n            this.viewer.init();\n        }\n        return false; // always returns false to prevent\n    }\n</code></pre>\n<h3 id=\"testing\">Testing</h3>\n<p>To test / develop the code I wrote, I used the built-in demo server (with <code>npm run start</code>) that comes with the <code>nwb</code> scaffolding. First I added the media (in this case, <code>stl</code> 3D mesh files) to <code>demo/public</code>, then I edited <code>demo/src/index.js</code> to use my new component:</p>\n<pre><code class=\"language-javascript\">class Demo extends Component {  \n    render() {\n        return (\n            &lt;div className=\"wrapper\"&gt;\n                &lt;h1&gt;react-jsc3d Demo&lt;/h1&gt;\n                &lt;Jsc3dViewer\n                    sceneUrl='test-media/trumpet.obj'\n                /&gt;\n            &lt;/div&gt;\n        );\n    }\n}\n</code></pre>\n<h2 id=\"polishingdebugging\">Polishing &amp; Debugging</h2>\n<h3 id=\"proptypes\">Proptypes</h3>\n<p>Once I got things working, I needed to polish everything up. I started by adding <a href=\"https://www.npmjs.com/package/prop-types\">PropTypes to my new component so that folks using this will get alerted if they try to pass in an incompatible type</a>. I also wrote a few simple functions to convert more sane / React-friendly data-types into the ones that JSC3D expected (e.g. <code>true</code> and <code>false</code> instead of the strings <code>\"on\"</code> and <code>\"off\"</code>). Finally, I wrote documentation in the <code>README.md</code> file so folks will know how to use it -- and wrote this article.</p>\n<p>Finally, I wrote some simple tests, set up automated testing with Travis, and released it on NPM!</p>\n<h2 id=\"debugging\">Debugging</h2>\n<p>During testing, I noticed it didn't properly define a few variables before use. While browser JS implementations are lenient enough to handle this, this was causing issues when compiling, so I had to specify all of them at the top of the file, like this:</p>\n<pre><code>var maxY, minY, maxZ, minZ, maxZ, VBArray;  \n</code></pre>\n<hr />\n<p>For the final product, <a href=\"https://github.com/michaelpb/react-jsc3d/blob/master/src/components/Jsc3dViewer.js#L57\">check out the code on GitHub</a>.</p>\n<p>That's it, hopefully this guide might save some time for folks looking to port legacy JS libraries into re-usable NPM packages.</p>\n</section>\n</article>\n</div>"
  },
  {
    "id": 39,
    "title": "Ardour 5.7 Review - Free software DAW",
    "slug": "ardour-5-7-review",
    "text": "<article class=\"content post tag-music tag-linux-audio tag-sound tag-review\">\n<h1 class=\"title\">Ardour 5.7 Review - Free software DAW</h1>\n<section class=\"post-content\">\n<p>Over this weekend I jumped back into music production, working on some sounds for my current game project. I decided to switch around my work-flow and learn <a href=\"http://ardour.org\">Ardour</a>. Ardour is a totally free software Digital Audio Workstation (DAW) with a professional feature-set for macOS, Windows, and Linux. It has the features you'd expect: multi-track high sample-rate recording, non-destructive editing (NDE) non-linear editing (NLE), VST/LV2 plug-in support for both FX and synths, MIDI and control surface support, and so on. This post describes my impressions using Ardour 5.7 on the (highly recommended) <a href=\"http://kxstudio.linuxaudio.org/\">KXStudio 14.04.5 distro of GNU/Linux</a>.</p>\n<blockquote>\n<p>If you want to hear what I made, check it out here:</p>\n<iframe width=\"100%\" height=\"166\" scrolling=\"no\" frameborder=\"no\" src=\"https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/360994181&amp;color=%23ff5500&amp;auto_play=false&amp;hide_related=false&amp;show_comments=true&amp;show_user=true&amp;show_reposts=false&amp;show_teaser=true\"></iframe>\n<p>In this track I am both testing out a new work-flow with Ardour, and some new hardware synths I picked up recently. The drum sounds are being generated by the <a href=\"http://www.korg.com/us/products/dj/volca_beats/\">Korg Volca</a> Beats, and the lead is me getting silly with noodling around with the <a href=\"https://www.soundonsound.com/reviews/arturia-microbrute\">Arturia Microbrute</a>, which is all kinds of fun. I also use this at a low octave for some drone sounds. I'm using <a href=\"https://www.sweetwater.com/store/detail/FEX800\">this cheap little DSP multi-effects unit</a> on these sounds to add some reverb.\nFor software, I'm using <a href=\"http://amsynth.github.io/\">Amsynth</a>, <a href=\"http://zynaddsubfx.sourceforge.net/\">ZynAddSubFX</a>, and some soundfonts from <a href=\"https://sso.mattiaswestlund.net/\">Sonatina Symphonic Orchestra</a>, all of which are\nfree software.</p>\n</blockquote>\n<h2 id=\"mydawjourney\">My DAW journey</h2>\n<p>I think some context is helpful, since unlike most I am not \"coming from\" the more popular DAWs like Pro Tools or Ableton. The last proprietary audio software I invested heavily in was Cakewalk Sonar and FLStudio.</p>\n<p>Almost couple years ago, after a several year dry-streak, <a href=\"../getting-started-with-pro-audio-on-linux/index.html\">I dove back into audio production with KXStudio</a>, with the rational that I didn't want to invest time in learning a proprietary audio system and have the risk of the \"rug\" being pulled out from under me. This is a real risk: Only 5 days ago from writing this article, Gibson, the parent company of the Cakewalk Sonar DAW, announced they are completely discontinuing the entire Cakewalk product line! After trying a few options (including <a href=\"https://www.bitwig.com/en/home.html\">BitWig Studio</a> and Ardour), I settled on the dated <a href=\"http://muse-sequencer.org/\">MuSE</a> DAW, since it's interface resembled Sonar the most.</p>\n<p>Over the last few days I decided to give Ardour a serious try, since it is presently the only free software DAW with any serious momentum.</p>\n<p><img src=\"../content/images/2017/11/IMG-0809.JPG\" alt=\"My new studio set-up!\" /></p>\n<h2 id=\"stuffiliked\">Stuff I liked</h2>\n<blockquote>\n<p>Ardour gives a very slick UI to all the fancy stuff you can do in JACK - you get the \"connect anything to anything\" power of JACK, but with a sane defaults that work for the 90% of the time you just want to stack some FX </p>\n<p><img src=\"../content/images/2017/11/snapshot8_cropped.png\" alt=\"powerful\" title=\"\" /></p>\n</blockquote>\n<ul>\n<li><p><strong>Played well with JACK</strong> - JACK is probably the coolest thing for Linux professional audio: connect any piece of (virtual or real) hardware to any other piece of (virtual or real) hardware using virtual patches. Ardour has truly managed to balance the flexibility of JACK with a clean and simple UI. For example, add a new FX plug-in to a bus or track, and ins/outs get automatically connected in a linear fashion. You can still set up complicated side-chains if you want, and can manually edit in/out lines for each \"rack\" unit, but the linear default is what I want 90% of the time.</p></li>\n<li><p><strong>Fully Lua scriptable</strong> - I haven't delved deeply into this, but, unsurprising for a free software package, Ardour seems to have the best scripting support of DAWs on the market, <a href=\"http://manual.ardour.org/lua-scripting/\">with most of its internal API exposed via Lua</a>. This is a huge plus in terms of potential power of the tool.</p></li>\n<li><p><strong>Human editable storage format</strong> - Ardour uses XML, WAV, and MIDI files to store everything it creates, and quite immediately obvious how to change stuff manually using a text editor. This makes me a lot more confident in using it since even if I encounter crashes or bugs I can recover my work, even if it takes some time.</p></li>\n<li><p><strong>Consistent UI</strong> - Once I understood the UI, it made perfect sense and is very cognitively simple. There are essentially only 2 views: mixer view (which allows for easy modification of effects, buses, and faders etc), and the editor view, which exposes <em>all</em> editing functionality, including piano-roll. It took me a few hours to get used to it, but now I truly appreciate this design decision.</p></li>\n<li><p><strong>Sessions, snapshots, clip list</strong> - Closely related to the file formats, I feel I have very meticulous control with the snapshot system, which saves a duplicate master XML document very cheaply.</p></li>\n<li><p><strong>Fast export and low system usage</strong> - Even on my older studio computer (Dell Optiplex workstation I picked up a couple years ago for about $100 including monitor / keyboard / mouse), everything hums along and the free-wheel export seems quite fast.</p></li>\n<li><p><strong>Great online documentation</strong> - Unlike a lot of free software these days, <a href=\"http://manual.ardour.org/\">Ardour has a fantastic online manual</a></p></li>\n<li><p><strong>Great controller support</strong> - Just a couple clicks to get my M-Audio Oxygen MIDI controller controlling the transport, and Ardour boasts support for all major popular control surfaces.</p></li>\n<li><p><strong>Great plug-in UI</strong> - I'm using Ardour with KXStudio, meaning out of the box it comes with 100s of effects and instruments available. Other DAWs I've used had UI bugs in a few spots where it'd try to generate massive menus, etc, but Ardour has both a great searchable plug-in explorer modal, \"favorite\" and \"hide\" features, and even a nice hierarchical menu that sorts them by type and team.</p></li>\n</ul>\n<p>A few more minor things which I noted were done well were: Great UI for tempo and meter changes, the \"magic\" cursor that can do both non-destructive editing and something else (such as automation editing) based on clicking on either top or bottom of a clip, and, well, a lot of small things that make Ardour a quality, polished piece of professional software.</p>\n<p><img src=\"../content/images/2017/11/jack_example.png\" alt=\"Jack can still be used with Ardour\" /></p>\n<h1 id=\"wishlist\">Wishlist</h1>\n<p>All-in-all Ardour is a fantastic piece of software, and definitely my favorite DAW, but it's also clear it has quite a bit of room for improvement. Fortunately development is very active so I have no doubt it will quickly shape up in all these areas.</p>\n<ul>\n<li><p><strong>Piano roll</strong> - Seriously, the one area that Ardour really lacks is with the Piano Roll interface. While I learned to appreciate the inline design decision for an inline piano-roll, I discovered that independent of that, Ardour's Piano Roll is still lacking some very essential features: </p>\n<ul><li>You cannot edit velocity editing via a graph interface, or \"paint crescendos\". Yeap, only via menus or keyboard shortcuts can you edit velocity. This makes certain work incredibly tedious, and this one missing feature is a borderline deal-breaker for my work-flow.</li>\n<li>As far as I can tell, no \"delete\" cursor mode</li>\n<li>Clunky interface for non-note MIDI events e.g. pitchblend</li>\n<li>As far as I can tell, no auto-creation of arpeggios (maybe with Lua scripts?)</li>\n<li>Generally lacking in tools for auto-setting of velocity based on meter (again, maybe with scripts?)</li></ul></li>\n<li><p><strong>Looping</strong> - As far as I can tell, there's no way to make a clip \"loopable\" where you can just drag it to a new length and it auto-repeats. While this can be easily emulated just by copying and pasting linked copies, it would be nice to have.</p></li>\n<li><p><strong>Bounce / freeze MIDI to audio</strong> - Only audio tracks can be frozen. Fortunately, this is very easy to emulate just by making a new audio track, hooking the outputs of the MIDI instrument to the inputs of the audio track, then recording, but it would be nice if it was 1 click away like it was with audio.</p></li>\n<li><p><strong>Real-time export</strong> - While Ardour 5.7 export dialog is feature-filled and generally excellent, it is noticeably lacking a non free-wheel export feature, which would be nice to avoid having to record hardware synths before exporting the entire project. Again, very easy to do just by connecting the master bus to the input of a track and hitting record, but it would be nice to have a built-in option.</p></li>\n<li><p><strong>Stability</strong> - There was one really annoying bug I encountered more than once while using Ardour: After reloading my project, one of my clips would be missing! Fortunately, it still existed in the editor list as though it was in the project, including its precise location etc, and it seemed just by clicking on it, it would suddenly appear again snapped in the right spot. It was as though it was both hidden and muted, although there was no indication that it was either. Hopefully this bug will be fixed soon since it was very annoying.</p></li>\n</ul>\n<p><img src=\"../content/images/2017/11/snapshot6.png\" alt=\"My song in Ardour\" /></p>\n<h1 id=\"summary\">Summary</h1>\n<p>While it still has its fair-share of paper-cuts, I've never been more pleased to overcome my initial distaste for Ardour's design decisions, and with Ardour's very active development I'm sure it's only going to get better and better. Props to the Ardour developers for creating something so great, and to the KXStudio team for packaging the easiest to setup computer audio collection I've ever used!</p>\n<p>I'm very glad I spent the time to learn Ardour, and no doubt it will be my DAW of choice for years to come.</p>\n</section>\n</article>\n</div>"
  },
  {
    "id": 41,
    "title": "How to quickly install Mattermost on Digital Ocean",
    "slug": "how-to-install-mattermost-on-digital-ocean",
    "text": "<article class=\"content post tag-web-dev tag-tutorial tag-docker\">\n<h1 class=\"title\">How to quickly install Mattermost on Digital Ocean</h1>\n<section class=\"post-content\">\n<p><a href=\"https://about.mattermost.com/\">Mattermost is a popular free software Slack alternative</a>. Slack can get really expensive really quickly for organizations of any sufficient size, so you either bare with the extremely limited free plan (which holds your data \"hostage\"), or you switch over to a free alternative like Mattermost. With this, instead of forking over cash for Slack, you can run your own for as cheaply as $5 a month.</p>\n<p>Digital Ocean is my preferred hosting service. It's similar to Amazon's AWS, but has a much cleaner and simpler interface, and easy to understand pricing scheme ($5 a month). If you haven't signed up yet, you can via <a href=\"https://m.do.co/c/46be31e3f9b5\">my affiliate link which will give us both $10 of credit</a>.</p>\n<p>Installation of Mattermost is pretty easy on Digital Ocean, as I found out. I in turn used <a href=\"https://docs.mattermost.com/install/prod-docker.html#production-docker-setup-on-ubuntu\">these</a> <a href=\"https://docs.mattermost.com/install/smtp-email-setup.html\">two</a> guides using their Docker Compose setup. Let's get started!</p>\n<h3 id=\"1createnewdockerdropletondigitalocean\">1. Create new Docker droplet on Digital Ocean</h3>\n<p>Create a new droplet using the Docker one-click app. Be sure to add your public key.</p>\n<p><img src=\"../content/images/2017/12/Selection_006.png\" alt=\"\" /></p>\n<h3 id=\"2installmattermostandbringupserver\">2. Install Mattermost and bring up server</h3>\n<ul>\n<li>First download the Mattermost's Dockerfiles. In this example, I've pinned the version to 5.6. SSH into your new droplet and run the following commands: </li>\n</ul>\n<pre><code>git clone https://github.com/mattermost/mattermost-docker.git  \ncd mattermost-docker  \ngit checkout 5.6  \n</code></pre>\n<ul>\n<li><p><strong>Optional:</strong> At this point, you may wish to switch to \"Team Edition\" - the truly free software version - as opposed to \"Enterprise Edition\", which has a few features installed (but disabled) unless you purchase a support contract from the corporation that develops Mattermost. To change to \"team edition\", open up the <code>docker-compose.yml</code> (consider running the command <code>nano docker-compose.yml</code>), and uncomment the line that says <code>args:</code> and <code>- edition: team</code>. There should be a comment above these lines saying something similar to \"uncomment the following lines to enable team edition\". To my knowledge, there is no downside to keeping it set to <em>Enterprise Edition</em>, even if you do not ever purchase a contract.</p></li>\n<li><p>Then build the images. This will take a while:</p></li>\n</ul>\n<pre><code>docker-compose build  \n</code></pre>\n<ul>\n<li>Finally, start the server in daemon mode</li>\n</ul>\n<pre><code>docker-compose up -d  \n</code></pre>\n<ul>\n<li>If you decided to use an older version (e.g. 4.x) you are done. Otherwise, you may have to run the following command to create relevant volume directories, and change permissions:</li>\n</ul>\n<pre><code>mkdir -pv ./volumes/app/mattermost/{data,logs,config}  \nchown -R 2000:2000 ./volumes/app/mattermost/  \n</code></pre>\n<h3 id=\"3configuringsitesettings\">3. Configuring site settings</h3>\n<p>Now visit the IP address. You should see a nice Mattermost interface. Create a team, add your domain name, configure what you want.</p>\n<p><img src=\"../content/images/2017/12/Selection_008.png\" style=\"width: 200px; float: left;\" /></p>\n<p><img src=\"../content/images/2017/12/Selection_009.png\" alt=\"\" /></p>\n<h3 id=\"email\">Email</h3>\n<p>You'll also want to setup email. <a href=\"https://docs.mattermost.com/install/smtp-email-setup.html\">That's a bit more complicated</a>, but generally you'll need to register for a 3rd party email service and then put in credentials here.</p>\n<p>Until then, you can just use \"invitation links\" to invite teammates to your channel. Email is not absolutely necessary for use, although it is very handy for notifications.</p>\n<h3 id=\"ssl\">SSL</h3>\n<p>You can also set up <code>https</code> support here.</p>\n<hr />\n<p>2018 Edit: <em>Thanks to Kevin for pointing this out some issues with the original version.</em> Source docs: <a href=\"https://docs.mattermost.com/install/prod-docker.html\">https://docs.mattermost.com/install/prod-docker.html</a></p>\n</section>\n</article>\n</div>"
  },
  {
    "id": 42,
    "title": "Installing Ubuntu 17.10 Linux on Acer Aspire 1",
    "slug": "installing-ubuntu-17-10-linux-on-acer-aspire-1",
    "text": "<article class=\"content post tag-web-dev tag-tutorial\">\n<h1 class=\"title\">Installing Ubuntu 17.10 Linux on Acer Aspire 1</h1>\n<section class=\"post-content\">\n<h1 id=\"updatedversionofthisarticlehttpmichaelborgubuntu1804onaceraspire1a11431c4hhanda11431c5gm\"><a href=\"http://michaelb.org/ubuntu-18-04-on-acer-aspire-1-a114-31-c4hh-and-a114-31-c5gm/\">Updated version of this article</a></h1>\n<hr />\n<p>The Acer Aspire 1 (A114-31-C4HH) is a great and super affordable machine for running a Linux-based operating system. At only $209 new, its cheaper than many Chromebooks, and is the only computer at this pricepoint to have a <strong>full 1920x1080 HD display</strong>. It's very easy to install Ubuntu Linux, and while it's memory is limited, it is completely usable even with Ubuntu's heavier-weight GNOME-based DE.</p>\n<h2 id=\"specs\">Specs</h2>\n<ul>\n<li><p><strong>Display:</strong> 14 in, 1920x1080</p></li>\n<li><p><strong>Storage:</strong> 32 GB eMMC SSD</p></li>\n<li><p><strong>Memory:</strong> 4 GB RAM</p></li>\n<li><p><strong>CPU:</strong> Celeron N3450, four cores at 1.1 - 2.2 GHz </p></li>\n<li><p><strong>Battery:</strong> 2-cell Li-Ion Battery -- it claims \"Up to 9 Hours Battery Life\", but on Linux doing a variety of tasks (web browsing, image editing) I could only get in the vicinity of 5 hours.</p></li>\n</ul>\n<p>By far, the biggest selling point to me was the display. <em>I can find no other laptop at this pricepoint with a full HD display.</em></p>\n<p>I was originally somewhat nervous about buying it for Linux since there was scant information about compatibility. Fortunately for me, <em>everything 100% works out of the box</em>. All the possible pain points (suspend, wireless, touchpad issues, etc) all seem to completely work without any extra configuration. After a full install of Ubuntu 17.10, <em>I did nothing else</em>, everything was perfectly configured already.</p>\n<p><img src=\"../content/images/2018/03/ubuntu.jpg\" alt=\"Linux running on my Acer Aspire 1\" /></p>\n<h2 id=\"installationpreppingthebios\">Installation (Prepping the BIOS)</h2>\n<p>The steps I followed to wipe Windows and succesfully install Ubuntu Linux is 1) prep the BIOS by disabling UEFI / Secure Boot, then 2) follow a normal graphical installation. It was quite simple, only slightly more complicated than other hardware.</p>\n<p><strong>Exact steps as follows:</strong></p>\n<ol>\n<li><p>Hard shut off (Hold power for 5+ seconds)</p></li>\n<li><p>Boot holding <code>&lt;F2&gt;</code> to BIOS</p></li>\n<li><p><code>&lt;Right&gt; &lt;Right&gt; &lt;Right&gt;</code> to \"Security\" tab</p></li>\n<li><p>Hit <code>&lt;Enter&gt;</code> to set supervisor password</p></li>\n<li><p>I used the (insecure) password of \"admin\". So I typed in <code>\"admin\"</code> <code>&lt;Enter&gt;</code> <code>\"admin\"</code> <code>&lt;Enter&gt;</code></p></li>\n<li><p><code>&lt;Right&gt;</code> to Boot tab</p></li>\n<li><p><code>&lt;Enter&gt; &lt;Down&gt; &lt;Enter&gt;</code> to disable Secure Boot</p></li>\n<li><p><code>&lt;Left&gt; &lt;Left&gt; &lt;Left&gt;</code> to Main tab</p></li>\n<li><p><code>&lt;Down&gt; &lt;Down&gt; &lt;Down&gt;</code> to F12 Boot Menu</p></li>\n<li><p><code>&lt;Enter&gt; &lt;Down&gt; &lt;Enter&gt;</code> to enable F12 Boot Menu</p></li>\n<li><p><code>&lt;F10&gt; &lt;Enter&gt;</code> to Save and Exit</p></li>\n<li><p>IMMEDIATELY hold down <code>&lt;F12&gt;</code> to boot to into Boot Device Selector</p></li>\n<li><p>Select USB (<code>&lt;Down&gt; &lt;Enter&gt;</code>)</p></li>\n</ol>\n<p>At this point, it should allow normal Ubuntu installation. Choose whatever menu items allow you to install Ubuntu, then follow the on-screen graphical installer. You'll want to wipe Windows when the option comes up (make sure you have no data you want to keep!), since the 32GB is barely enough for one OS, let alone two.</p>\n<h2 id=\"reviewofubuntulinuxonaceraspire1\">Review of Ubuntu Linux on Acer Aspire 1</h2>\n<p>Right now, it's my top recommended Linux machine. At such a low price point, it's more than capable of web development, web usage, and the like. I've tested full screen 1080p YouTube, and normal browsing on some graphically intense sites, and so far everything has been flawless out of the box. Even using a heavy-weight DE like stock GNOME, the CPU is more than enough for fast and frustration-free average usage.</p>\n<p>The 1 caveat: <em>only 4 GB is limiting</em>. When using stock GNOME, more than a half-dozen Chromium tabs or applications running, you will start \"swapping\" which causes slow downs -- though on the eMMC the slow downs are nothing like what they used to be on hard-disks (I was actually pleasantly surprised at how cleanly it swapped). Just idling with GNOME, I noticed over 1 GB of that precious RAM being used. If you want a little more elbow room, I'd recommend using a less flashy DE like XFCE or LXDE.</p>\n<p>However, for most usage, the gorgeous crisp display, sleek form factor, various awesome features (one of the few laptops of the style that have an eithernet port!), great Linux compatibility, and extremely low price point make the 2017 Acer Aspire 1 <em>the best low-priced Linux laptop hardware currently on the market</em>. I've been using as my primary machine for the past 5 days, and so far I recommend it without reservation as the best laptop at the price point.</p>\n<p><em>NOTE: Don't confuse this with the Acer One, which is a completely different netbook-style model from several years ago. The A114-31-C4HH is the one I'm referring to.</em></p>\n</section>\n</article>\n</div>"
  },
  {
    "id": 43,
    "title": "Ubuntu 18.04 on Acer Aspire 1 - A114-31-C4HH and A114-31-C5GM",
    "slug": "ubuntu-18-04-on-acer-aspire-1",
    "text": "<article class=\"content post tag-review tag-tutorial tag-web-dev tag-linux\">\n<h1 class=\"title\">Ubuntu 18.04 on Acer Aspire 1 - A114-31-C4HH and A114-31-C5GM</h1>\n<section class=\"post-content\">\n<p><em>This is an updated version of <a href=\"../installing-ubuntu-17-10-linux-on-acer-aspire-1/index.html\">a previous article -- read it for more comments</a>.</em></p>\n<h2 id=\"aboutthemachine\">About the machine</h2>\n<p>The Acer Aspire 1 (A114-31-C4HH and A114-31-C5GM) is a great and super affordable machine for running a Linux-based operating system. At only $180-220 new, its cheaper than many Chromebooks, and is the only computer at this price-point to have a <strong>full 1920x1080 HD display</strong>. It's very easy to install Ubuntu Linux, and while it's memory is limited, it is completely usable even with Ubuntu's heavier-weight GNOME-based DE.</p>\n<h2 id=\"specs\">Specs</h2>\n<ul>\n<li><p><strong>Display:</strong> 14 in, 1920x1080</p></li>\n<li><p><strong>Storage:</strong> 32 GB eMMC SSD</p></li>\n<li><p><strong>Memory:</strong> 4 GB RAM</p></li>\n<li><p><strong>CPU:</strong> Celeron N3450, four cores at 1.1 - 2.2 GHz </p></li>\n<li><p><strong>Battery:</strong> 2-cell Li-Ion Battery -- it claims \"Up to 9 Hours Battery Life\", but on Linux doing a variety of tasks (web browsing, image editing) I could only get in the vicinity of 5 hours.</p></li>\n</ul>\n<p>By far, the biggest selling point to me was the display. <em>I can find no other laptop at this pricepoint with a full HD display.</em></p>\n<p><em>Everything 100% works out of the box</em>. All the possible pain points (suspend, wireless, touchpad issues, etc) all seem to completely work without any extra configuration. After a full install of Ubuntu 18.04, everything is perfectly configured already.</p>\n<p><img src=\"../content/images/2018/10/IMG_20180903_115521_cropped.jpg\" alt=\"Kickstart Coding Laptops\" /></p>\n<h2 id=\"installationpreppingthebios\">Installation (Prepping the BIOS)</h2>\n<p>The steps I followed to wipe Windows and successfully install Ubuntu Linux is 1) prep the BIOS by disabling UEFI / Secure Boot, then 2) follow a normal graphical installation. It was quite simple, only slightly more complicated than other hardware.</p>\n<p><strong>Exact steps as follows:</strong></p>\n<ol>\n<li><p>Hard shut off (Hold power for 5+ seconds)</p></li>\n<li><p>Boot holding <code>&lt;F2&gt;</code> to BIOS</p></li>\n<li><p><strong>IMPORTANT:</strong> Confirm that the BIOS is at least version 1.08 or 1.09 (see image above)</p></li>\n<li><p><code>&lt;Right&gt; &lt;Right&gt; &lt;Right&gt;</code> to \"Security\" tab</p></li>\n<li><p>Hit <code>&lt;Enter&gt;</code> to set supervisor password</p></li>\n<li><p>I used the (insecure) password of \"admin\". So I typed in <code>\"admin\"</code> <code>&lt;Enter&gt;</code> <code>\"admin\"</code> <code>&lt;Enter&gt;</code></p></li>\n<li><p><code>&lt;Right&gt;</code> to Boot tab</p></li>\n<li><p><code>&lt;Enter&gt; &lt;Down&gt; &lt;Enter&gt;</code> to disable Secure Boot</p></li>\n<li><p><code>&lt;Left&gt; &lt;Left&gt; &lt;Left&gt;</code> to Main tab</p></li>\n<li><p><code>&lt;Down&gt; &lt;Down&gt; &lt;Down&gt;</code> to F12 Boot Menu</p></li>\n<li><p><code>&lt;Enter&gt; &lt;Down&gt; &lt;Enter&gt;</code> to enable F12 Boot Menu</p></li>\n<li><p><code>&lt;F10&gt; &lt;Enter&gt;</code> to Save and Exit</p></li>\n<li><p>IMMEDIATELY hold down <code>&lt;F12&gt;</code> to boot to into Boot Device Selector</p></li>\n<li><p>Select USB (<code>&lt;Down&gt; &lt;Enter&gt;</code>)</p></li>\n</ol>\n<p>At this point, it should allow normal Ubuntu installation. Choose whatever menu items allow you to install Ubuntu, then follow the on-screen graphical installer. You'll want to wipe Windows when the option comes up (make sure you have no data you want to keep!), since the 32GB is barely enough for one OS, let alone two.</p>\n<h2 id=\"installationgotchas\">Installation Gotchas</h2>\n<blockquote>\n<p><img src=\"../content/images/2018/10/IMG_20181025_211951_cropped.jpg\" alt=\"Bios\" title=\"\" /></p>\n</blockquote>\n<ul>\n<li><p><strong>BIOS:</strong> One thing to watch out for is that devices with manufactoring dates <em>before September 2017</em> (see sticker on bottom of computer) typically ship with the 1.05 BIOS, which is incompatible. I've only once received an older model out of the dozens I've bought, and it was when I purchased a used model from a 3rd party vendor. <strong>Only the 1.08+ BIOS is compatible with GNU/Linux without extra effort.</strong> 1.09 (the most common) or above is fine too. Anything before that, while installing Linux it will hang while installing grub2, and then permanently mess up the EFI partition, making it impossible to even boot back into the BIOS, effectively bricking your system. If you have a machine with an old version such as v1.05 installed, it is possible to upgrade the BIOS while within Windows. For 1.05 and other older BIOS versions, you <em>must</em> boot into Windows, and then use ACER's proprietary upgrade tool to upgrade the BIOS first.</p></li>\n<li><p><strong>Inconsistent compatibility with installing from cheap USB thumbdrives</strong> - While not specific to this model, it does deserve mentioning: If you are using cheap, off-brand USB thumbdrives to install Ubuntu, you might have to reboot a few times to get it to detect it. Inconsistently, it won't detect it and be able to boot from it. I've had 0 problems with name-brand (SanDisk) thumbdrives, but a few times I have had to reboot 5 or 10 times in a row to get cheap $3 thumbdrives to get detected and be able to install Ubuntu.</p></li>\n<li><p><strong>Defective eMMC drives</strong> - Out of the 20+ devices I've prepared, exactly one of them came with a defective drive. The symptom was it out-of-the-blue corrupted the partition and was unable to boot after a couple days after installing Linux. This translates to about a 5% defect rate in my experience. I returned it to Amazon for a full refund.</p></li>\n<li><p><strong>Battery-drain hard restart</strong> - Sometimes you need to fully drain the batter for a truly hard reset of the laptop. Once or twice it's gotten in a weird state where it was not turning on, and I had to do this -- not really sure what happened or why. You can do this by pressing a little button on the bottom of the device, only accessible with a pen or toothpick.</p></li>\n</ul>\n<blockquote>\n<h2 id=\"otherinformation\">Other information</h2>\n<ul>\n<li><p><strong><code>A114-31-C4HH</code> vs <code>A114-31-C5GM</code></strong> - As far as I can tell, these two models are 100% identical. The only difference is A114-31-C4HH includes a full Windows 10 license (and thus is often priced higher) and the other does not. Thus, buying the A114-31-C5GM license is typically a better deal if you are using Linux.</p></li>\n<li><p><strong>Other GNU/Linux Distributions</strong> In the comments of the previous article, Visnu Devna wrote glowingly of good Antergos (Arch-based) with Cinnamon Desktop compatibility. He wrote: \"I can say that I am fully satisfied, for the first time I got exactly the laptop I wanted, thank you.\"</p></li>\n</ul>\n</blockquote>\n<h2 id=\"reviewofubuntulinuxonaceraspire1\">Review of Ubuntu Linux on Acer Aspire 1</h2>\n<p><strong>Verdict: Best Laptop for Linux Under $400</strong></p>\n<p>I have now installed Ubuntu 18.04 on about 20 Acer 1 A114-31-C4HH and A114-31-C5GM devices. My students at <a href=\"http://kickstartcoding.com/\">Kickstart Coding</a> have used it for 6+ months for web browsing with Chromium and Firefox and web development using VS Code, Python, and React.js.</p>\n<p>Verdict: Top recommended Linux machine at this price-point. At such a low price point, it's more than capable of web development, web usage, and the like. Even using a heavy-weight DE like stock GNOME, the CPU is more than enough for fast and frustration-free average usage.</p>\n<p>The 1 caveat: <em>only 4 GB is limiting</em>. When using stock GNOME, more than a half-dozen Chromium tabs or applications running, you will start \"swapping\" which causes slow downs -- though on the eMMC the slow downs are nothing like what they used to be on hard-disks (I was actually pleasantly surprised at how cleanly it swapped). Just idling with GNOME, I noticed over 1 GB of that precious RAM being used. If you want a little more elbow room, I'd recommend using a less flashy DE like XFCE or LXDE.</p>\n<p>However, for most usage, the gorgeous crisp display, sleek form factor, various awesome features (one of the few laptops of the style that have an eithernet port!), great Linux compatibility, and extremely low price point make the 2017 and 2018 Acer Aspire 1 <em>the best low-priced Linux laptop hardware currently on the market</em>. I've been using as my primary machine for the past 5 days, and so far I recommend it without reservation as the best laptop at the price point.</p>\n<p><img src=\"../content/images/2018/10/IMG_20180903_122328_cropped.jpg\" alt=\"Kickstart Coding Laptops\" /></p>\n</section>\n</article>\n</div>"
  },
  {
    "id": 45,
    "title": "Upgrading Mattermost using docker-compose",
    "slug": "upgrading-mattermost",
    "text": "<article class=\"content post tag-web-dev tag-tutorial\">\n<h1 class=\"title\">Upgrading Mattermost using docker-compose</h1>\n<section class=\"post-content\">\n<p>This is a guide on upgrading and/or migrating Mattermost 5.6 (from 4.x) in a deploy that used docker-compose.</p>\n<p>It's been a year, and I want to freshen up my Mattermost install, get some of the new features. I also want a bit more elbow-room in my Mattermost installation. My installation (~20 active users at any given time) was running absolutely fine at Digital Ocean's cheapest ($5 a month) plan, but I also wanted to to future-proof my installation a little bit, so I'm upgrading to their $15 a month plan.</p>\n<p><a href=\"../how-to-install-mattermost-on-digital-ocean/index.html\">Interested in installing Mattermost quickly using Digital Ocean and their provided Docker images? Read my tutorial here, which has been tested with versions 4.2.3 and 5.6.</a></p>\n<h1 id=\"tutorial\">Tutorial</h1>\n<p>This is a followup from my previous blog post, and assumes you launched Mattermost using their provided Docker images. This also assumes you have made no major changes to Mattermost, such as installing plug-ins. If you did install plug-ins, you probably want to temporarily disable them while you do the upgrade.</p>\n<h2 id=\"1backeverythingupandalertyourusers\">1. Back everything up, and alert your users.</h2>\n<p>To be extra careful, I made back-ups at two levels:</p>\n<ol>\n<li><p>The droplet / image level (within Digital Ocean this can be done by either creating a snapshot, or enabling regular backups)</p></li>\n<li><p>Simply by copying the volumes. If you are using their docker-compose file of Mattermost, then anything important should be in the volumes directory. I just did a <code>cp -r</code> of this to a new location on the same machine. This took less than a thirty seconds for 1.8 GB on a DO droplet. </p></li>\n</ol>\n<pre><code>cd mattermost-docker  \ndocker-compose down # shut down  \ncp -r volumes ../volumes-backup  \n</code></pre>\n<p>This is just common admin sense, but if there are active users, you'll want to ensure they don't try to access the site while the site is down, or for example add a post after. I also added a temporary re-direct with CloudFlare to a \"Schedule maintenance post\" on a separate server.</p>\n<h2 id=\"2checkoutthenewestversion\">2. Checkout the newest version</h2>\n<p>In this case, I had originally installed <code>4.2.3</code>, and I wanted to upgrade directly to <code>5.6.2</code>. This was simply a matter of doing a <code>git checkout</code> of the necessary tag.</p>\n<pre><code>cd mattermost-docker  \ngit pull  \ngit checkout 5.6.2  \n</code></pre>\n<h2 id=\"3rebuild\">3. Re-build</h2>\n<p>This and all subsequent commands assumes you are in the <code>mattermost-docker</code> location:</p>\n<pre><code>docker-compose down  \ndocker-compose build  \n</code></pre>\n<h2 id=\"4upgradingfrom4xchangepermissions\">4. Upgrading from 4.x: Change permissions</h2>\n<p>If you decided to use an older version (e.g. 4.x) you are done. Otherwise, you may have to run the following command to create relevant volume directories, and change permissions: </p>\n<pre><code>mkdir -pv ./volumes/app/mattermost/{data,logs,config,plugins}  \nchown -R 2000:2000 ./volumes/app/mattermost/  \n</code></pre>\n<h2 id=\"5upgradingfrom4xchangeportnumber\">5. Upgrading from 4.x: Change port number</h2>\n<p>The <code>config.json</code> had some essential changes since the 4.x versions. This means that the port number must be changed from <code>80</code> to <code>8000</code>.</p>\n<ol>\n<li><p>You can open up the <code>config.json</code> file using <code>nano</code> as such: <code>nano ./volumes/app/mattermost/config/config.json</code></p></li>\n<li><p>Change the property that looks like <code>\"ListenAddress\": \":8000\",</code> to <code>\"ListenAddress\": \":80\",</code></p></li>\n</ol>\n<p><em>NOTE:</em> You do NOT need to change the <code>\"WebsocketPort\": 80,</code> -- this should be left at 80 otherwise it won't work. </p>\n<h2 id=\"6startserveragain\">6. Start server again</h2>\n<pre><code>docker-compose up -d  \n</code></pre>\n<p>For me, everything <em>just worked</em> at this point, with the latest version of Mattermost happily humming along.</p>\n<h2 id=\"7optionalresizeandormigrate\">7. (Optional) Resize and/or migrate</h2>\n<p>At this point, you can safely shutdown the droplet, then move or resize the droplet safely from <a href=\"https://www.digitalocean.com/docs/images/snapshots/how-to/migrate-droplets/\">Digital Ocean's interface</a>.</p>\n<p>If you are not using Digital Ocean, to migrate to a new machine <em>should</em> be as simple as copying over the <code>volumes</code> directory -- although I have not actually tested this.</p>\n<hr />\n<p>All-in-all, an extremely painless process. Let me know in the comments if it works for your, or it required any other changes.</p>\n</section>\n</article>\n</div>"
  }
]