
    <script src="https://modulojs.org/js/Modulo.js"></script>
    <Modulo>
        <Library namespace="x" src="/components/core.html"></Library>
    </Modulo>
    <script>Modulo.defineAll()</script>
<x-Page archivedid="35"pagetitle="JavaScript syntax cheat-sheet for total newbies">

<article class="content post tag-javascript tag-web-dev tag-cheat-sheet tag-learning">
<h1 class="title">JavaScript syntax cheat-sheet for total newbies</h1>
<section class="post-content">
<p>Earlier this year I realized that there aren't any good cheat-sheets for students new to JavaScript and coding in general to learn the (relatively dense!) syntax of JavaScript. Today I decided to make my own!</p>
<p>In the past I've really like printing up cheat-sheets as I learned new technologies. It's a great thing to have taped to the wall or desk in front of you. Most existing JavaScript cheat-sheets are either too advanced or unclear, or have factual issues, or are poorly formatted and lack syntax highlighting or span many pages. Mine is condensed to one page and is made to be as clear as possible for JS noobs.</p>
<h1 id="downloadithere">Download it here</h1>
<ul>
<li><p><a href="https://github.com/michaelpb/cheatsheets/raw/master/newbie_javascript_syntax/javascript_syntax_cheatsheet.pdf">JavaScript Syntax Cheat Sheet: Single page PDF version</a></p></li>
<li><p><a href="https://github.com/michaelpb/cheatsheets/blob/master/newbie_javascript_syntax/javascript_syntax_cheatsheet.md">JavaScript Syntax Cheat Sheet: Markdown version (slightly different, but mostly the same)</a></p></li>
</ul>
<p>This will be the first in a series of cheat-sheets aimed at coders and programming newbies learning new technologies.</p>
<h1 id="preview">Preview</h1>
<p>I'd recommend using the <a href="https://github.com/michaelpb/cheatsheets/raw/master/newbie_javascript_syntax/javascript_syntax_cheatsheet.pdf">1 page PDF version</a> version, since I will keep it updated and likely add or correct stuff as I go along, but a partial preview is available below:</p>
<h2 id="basics">Basics</h2>
<blockquote>
<p>Assignment: Put data into variables. New variables are "declared" with
<code>var</code> keyword.</p>
</blockquote>
<pre><code class="language-javascript">var a = 5;  
var name = "Alex";  
var isReadyToLearn = true;  
name = "Pat";  
</code></pre>
<blockquote>
<p>Expressions: In many places in JavaScript, such as in assignment,
JavaScript expects "expressions", that can be like math formulas.</p>
</blockquote>
<pre><code class="language-javascript">var a = 10;  
var d = 4;  
c = c + (d * 3);  
</code></pre>
<blockquote>
<p>Boolean expressions: Expressions can also compute the "truth" of
conditions, resulting in values of <code>true</code> or <code>false</code>.</p>
</blockquote>
<pre><code class="language-javascript">var isPrepared = true;  
var timeSpent = 5;  
var readyToStart = isPrepared &amp;&amp; timeSpent &gt; 3;  
</code></pre>
<h2 id="debugging">Debugging</h2>
<blockquote>
<p>Console log: To output data to the console (either in the browser or node.js terminal), use <code>console.log</code>. Variables can outputed by separating with commas.</p>
</blockquote>
<pre><code class="language-javsacript">console.log('Hello there!');  
var a = 0;  
console.log('The value of a is ', a);  
</code></pre>
<h2 id="datatypes">Data types</h2>
<blockquote>
<p>Array: Numbered of data, each numbered starting with 0.</p>
</blockquote>
<pre><code class="language-javascript">var array = ['sam', 900, false];  
console.log('Name is ', array[0]);  
console.log('Age is ', array[1]);  
</code></pre>
<blockquote>
<p>Object: Like a "dictionary" list of definitions, consists of associated
key and value pairs. Properties can be accessed with either <code>.</code> or <br />
<code>[]</code>.</p>
</blockquote>
<pre><code class="language-javascript">var myObj = {  
    name: 'Sam',
    age: 900,
};
console.log('Name is ', myObj.name);  
console.log('Age is ', myObj['age']);  
</code></pre>
<h2 id="conditionals">Conditionals</h2>
<blockquote>
<p>If-Statement: Conditionally execute the code in the curly-braces <code>{ }</code></p>
</blockquote>
<pre><code class="language-javascript">if (a &gt; 3) {  
    console.log('A is greater than 3');
}
</code></pre>
<blockquote>
<p>If-Else-Statement: Presents two code paths, conditionally executing one
block of code or the other.</p>
</blockquote>
<pre><code class="language-javascript">if (name === "Alex") {  
    console.log('Hi Alex');
} else {
    console.log('Hey there stranger');
}
</code></pre>
<h2 id="loops">Loops</h2>
<blockquote>
<p>While-Loop: Like <code>if</code>, except it repeats, possibly forever, until the
condition no longer is true.</p>
</blockquote>
<pre><code class="language-javascript">var a = 0;  
while (a &lt; 5) {  
    console.log('Increasing value of a...');
    a = a + 1;
}
</code></pre>
<blockquote>
<p>For-Loop: An older form of loop that has a special syntax, conventionally
used only for looping through arrays.</p>
</blockquote>
<pre><code class="language-javascript">var array = ['pat', 'alex', 'max', 'sam'];  
for (var i = 0; i &lt; array.length; i++) {  
    var item = array[i];
    console.log('The name is ', item);
}
</code></pre>
<h2 id="functions">Functions</h2>
<blockquote>
<p>Function: Stores the code between the curly-braces
<code>{ }</code> for later re-use.</p>
<p>Function call: Executes the function</p>
</blockquote>
<pre><code class="language-javascript">var myFunction = function () {  
    console.log('This code can be reused...');
};
myFunction();  
</code></pre>
<blockquote>
<p>Named function: Shortcut for giving a function a name, same behavior.</p>
</blockquote>
<pre><code class="language-javascript">function myFunction () {  
    console.log('This code can be reused...');
};
myFunction();  
</code></pre>
<blockquote>
<p>Parameters: Functions (both named and otherwise) use parameters as "input"
in order to be more re-usable.</p>
<p>Return statement: Use to send data back to the caller.</p>
</blockquote>
<pre><code class="language-javascript">function addAndMultiply (a, b) {  
    return a + b + (a * b);
}
var total = addAndMultiply(10, 5);  
var total2 = addAndMultiply(total, 100);  
console.log('Final calculation: ', total2);  
</code></pre>
</section>
</article>
</div>

</x-Page>